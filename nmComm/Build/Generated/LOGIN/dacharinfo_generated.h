// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DACHARINFO_PACKET_LOGIN_H_
#define FLATBUFFERS_GENERATED_DACHARINFO_PACKET_LOGIN_H_

#include "flatbuffers/flatbuffers.h"

namespace Packet {
namespace Login {

struct DACharInfo;

struct DACharInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SID = 4,
    VT_CHARNAME = 6,
    VT_GENDER = 8,
    VT_HAIR = 10,
    VT_CHECKPOINT = 12,
    VT_WEAPON1 = 14,
    VT_WEAPON2 = 16,
    VT_WEAPON3 = 18,
    VT_ARMOR1 = 20,
    VT_ARMOR2 = 22,
    VT_ARMOR3 = 24,
    VT_ARMOR4 = 26,
    VT_W1TIER = 28,
    VT_W2TIER = 30,
    VT_W3TIER = 32,
    VT_A1TIER = 34,
    VT_A2TIER = 36,
    VT_A3TIER = 38,
    VT_A4TIER = 40
  };
  int32_t sid() const {
    return GetField<int32_t>(VT_SID, 0);
  }
  const flatbuffers::String *charName() const {
    return GetPointer<const flatbuffers::String *>(VT_CHARNAME);
  }
  int8_t gender() const {
    return GetField<int8_t>(VT_GENDER, 0);
  }
  int8_t hair() const {
    return GetField<int8_t>(VT_HAIR, 0);
  }
  int32_t checkpoint() const {
    return GetField<int32_t>(VT_CHECKPOINT, 0);
  }
  int32_t weapon1() const {
    return GetField<int32_t>(VT_WEAPON1, 0);
  }
  int32_t weapon2() const {
    return GetField<int32_t>(VT_WEAPON2, 0);
  }
  int32_t weapon3() const {
    return GetField<int32_t>(VT_WEAPON3, 0);
  }
  int32_t armor1() const {
    return GetField<int32_t>(VT_ARMOR1, 0);
  }
  int32_t armor2() const {
    return GetField<int32_t>(VT_ARMOR2, 0);
  }
  int32_t armor3() const {
    return GetField<int32_t>(VT_ARMOR3, 0);
  }
  int32_t armor4() const {
    return GetField<int32_t>(VT_ARMOR4, 0);
  }
  int16_t w1tier() const {
    return GetField<int16_t>(VT_W1TIER, 0);
  }
  int16_t w2tier() const {
    return GetField<int16_t>(VT_W2TIER, 0);
  }
  int16_t w3tier() const {
    return GetField<int16_t>(VT_W3TIER, 0);
  }
  int16_t a1tier() const {
    return GetField<int16_t>(VT_A1TIER, 0);
  }
  int16_t a2tier() const {
    return GetField<int16_t>(VT_A2TIER, 0);
  }
  int16_t a3tier() const {
    return GetField<int16_t>(VT_A3TIER, 0);
  }
  int16_t a4tier() const {
    return GetField<int16_t>(VT_A4TIER, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_SID) &&
           VerifyOffset(verifier, VT_CHARNAME) &&
           verifier.VerifyString(charName()) &&
           VerifyField<int8_t>(verifier, VT_GENDER) &&
           VerifyField<int8_t>(verifier, VT_HAIR) &&
           VerifyField<int32_t>(verifier, VT_CHECKPOINT) &&
           VerifyField<int32_t>(verifier, VT_WEAPON1) &&
           VerifyField<int32_t>(verifier, VT_WEAPON2) &&
           VerifyField<int32_t>(verifier, VT_WEAPON3) &&
           VerifyField<int32_t>(verifier, VT_ARMOR1) &&
           VerifyField<int32_t>(verifier, VT_ARMOR2) &&
           VerifyField<int32_t>(verifier, VT_ARMOR3) &&
           VerifyField<int32_t>(verifier, VT_ARMOR4) &&
           VerifyField<int16_t>(verifier, VT_W1TIER) &&
           VerifyField<int16_t>(verifier, VT_W2TIER) &&
           VerifyField<int16_t>(verifier, VT_W3TIER) &&
           VerifyField<int16_t>(verifier, VT_A1TIER) &&
           VerifyField<int16_t>(verifier, VT_A2TIER) &&
           VerifyField<int16_t>(verifier, VT_A3TIER) &&
           VerifyField<int16_t>(verifier, VT_A4TIER) &&
           verifier.EndTable();
  }
};

struct DACharInfoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sid(int32_t sid) {
    fbb_.AddElement<int32_t>(DACharInfo::VT_SID, sid, 0);
  }
  void add_charName(flatbuffers::Offset<flatbuffers::String> charName) {
    fbb_.AddOffset(DACharInfo::VT_CHARNAME, charName);
  }
  void add_gender(int8_t gender) {
    fbb_.AddElement<int8_t>(DACharInfo::VT_GENDER, gender, 0);
  }
  void add_hair(int8_t hair) {
    fbb_.AddElement<int8_t>(DACharInfo::VT_HAIR, hair, 0);
  }
  void add_checkpoint(int32_t checkpoint) {
    fbb_.AddElement<int32_t>(DACharInfo::VT_CHECKPOINT, checkpoint, 0);
  }
  void add_weapon1(int32_t weapon1) {
    fbb_.AddElement<int32_t>(DACharInfo::VT_WEAPON1, weapon1, 0);
  }
  void add_weapon2(int32_t weapon2) {
    fbb_.AddElement<int32_t>(DACharInfo::VT_WEAPON2, weapon2, 0);
  }
  void add_weapon3(int32_t weapon3) {
    fbb_.AddElement<int32_t>(DACharInfo::VT_WEAPON3, weapon3, 0);
  }
  void add_armor1(int32_t armor1) {
    fbb_.AddElement<int32_t>(DACharInfo::VT_ARMOR1, armor1, 0);
  }
  void add_armor2(int32_t armor2) {
    fbb_.AddElement<int32_t>(DACharInfo::VT_ARMOR2, armor2, 0);
  }
  void add_armor3(int32_t armor3) {
    fbb_.AddElement<int32_t>(DACharInfo::VT_ARMOR3, armor3, 0);
  }
  void add_armor4(int32_t armor4) {
    fbb_.AddElement<int32_t>(DACharInfo::VT_ARMOR4, armor4, 0);
  }
  void add_w1tier(int16_t w1tier) {
    fbb_.AddElement<int16_t>(DACharInfo::VT_W1TIER, w1tier, 0);
  }
  void add_w2tier(int16_t w2tier) {
    fbb_.AddElement<int16_t>(DACharInfo::VT_W2TIER, w2tier, 0);
  }
  void add_w3tier(int16_t w3tier) {
    fbb_.AddElement<int16_t>(DACharInfo::VT_W3TIER, w3tier, 0);
  }
  void add_a1tier(int16_t a1tier) {
    fbb_.AddElement<int16_t>(DACharInfo::VT_A1TIER, a1tier, 0);
  }
  void add_a2tier(int16_t a2tier) {
    fbb_.AddElement<int16_t>(DACharInfo::VT_A2TIER, a2tier, 0);
  }
  void add_a3tier(int16_t a3tier) {
    fbb_.AddElement<int16_t>(DACharInfo::VT_A3TIER, a3tier, 0);
  }
  void add_a4tier(int16_t a4tier) {
    fbb_.AddElement<int16_t>(DACharInfo::VT_A4TIER, a4tier, 0);
  }
  explicit DACharInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DACharInfoBuilder &operator=(const DACharInfoBuilder &);
  flatbuffers::Offset<DACharInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DACharInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<DACharInfo> CreateDACharInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t sid = 0,
    flatbuffers::Offset<flatbuffers::String> charName = 0,
    int8_t gender = 0,
    int8_t hair = 0,
    int32_t checkpoint = 0,
    int32_t weapon1 = 0,
    int32_t weapon2 = 0,
    int32_t weapon3 = 0,
    int32_t armor1 = 0,
    int32_t armor2 = 0,
    int32_t armor3 = 0,
    int32_t armor4 = 0,
    int16_t w1tier = 0,
    int16_t w2tier = 0,
    int16_t w3tier = 0,
    int16_t a1tier = 0,
    int16_t a2tier = 0,
    int16_t a3tier = 0,
    int16_t a4tier = 0) {
  DACharInfoBuilder builder_(_fbb);
  builder_.add_armor4(armor4);
  builder_.add_armor3(armor3);
  builder_.add_armor2(armor2);
  builder_.add_armor1(armor1);
  builder_.add_weapon3(weapon3);
  builder_.add_weapon2(weapon2);
  builder_.add_weapon1(weapon1);
  builder_.add_checkpoint(checkpoint);
  builder_.add_charName(charName);
  builder_.add_sid(sid);
  builder_.add_a4tier(a4tier);
  builder_.add_a3tier(a3tier);
  builder_.add_a2tier(a2tier);
  builder_.add_a1tier(a1tier);
  builder_.add_w3tier(w3tier);
  builder_.add_w2tier(w2tier);
  builder_.add_w1tier(w1tier);
  builder_.add_hair(hair);
  builder_.add_gender(gender);
  return builder_.Finish();
}

inline flatbuffers::Offset<DACharInfo> CreateDACharInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t sid = 0,
    const char *charName = nullptr,
    int8_t gender = 0,
    int8_t hair = 0,
    int32_t checkpoint = 0,
    int32_t weapon1 = 0,
    int32_t weapon2 = 0,
    int32_t weapon3 = 0,
    int32_t armor1 = 0,
    int32_t armor2 = 0,
    int32_t armor3 = 0,
    int32_t armor4 = 0,
    int16_t w1tier = 0,
    int16_t w2tier = 0,
    int16_t w3tier = 0,
    int16_t a1tier = 0,
    int16_t a2tier = 0,
    int16_t a3tier = 0,
    int16_t a4tier = 0) {
  return Packet::Login::CreateDACharInfo(
      _fbb,
      sid,
      charName ? _fbb.CreateString(charName) : 0,
      gender,
      hair,
      checkpoint,
      weapon1,
      weapon2,
      weapon3,
      armor1,
      armor2,
      armor3,
      armor4,
      w1tier,
      w2tier,
      w3tier,
      a1tier,
      a2tier,
      a3tier,
      a4tier);
}

}  // namespace Login
}  // namespace Packet

#endif  // FLATBUFFERS_GENERATED_DACHARINFO_PACKET_LOGIN_H_
