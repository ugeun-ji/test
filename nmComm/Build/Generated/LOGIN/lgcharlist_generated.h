// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LGCHARLIST_PACKET_LOGIN_H_
#define FLATBUFFERS_GENERATED_LGCHARLIST_PACKET_LOGIN_H_

#include "flatbuffers/flatbuffers.h"

#include "dacharinfo_generated.h"

namespace Packet {
namespace Login {

struct LGCharList;

struct LGCharList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_COUNT = 4,
    VT_INFO = 6
  };
  uint16_t count() const {
    return GetField<uint16_t>(VT_COUNT, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<DACharInfo>> *info() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<DACharInfo>> *>(VT_INFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_COUNT) &&
           VerifyOffset(verifier, VT_INFO) &&
           verifier.VerifyVector(info()) &&
           verifier.VerifyVectorOfTables(info()) &&
           verifier.EndTable();
  }
};

struct LGCharListBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_count(uint16_t count) {
    fbb_.AddElement<uint16_t>(LGCharList::VT_COUNT, count, 0);
  }
  void add_info(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DACharInfo>>> info) {
    fbb_.AddOffset(LGCharList::VT_INFO, info);
  }
  explicit LGCharListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LGCharListBuilder &operator=(const LGCharListBuilder &);
  flatbuffers::Offset<LGCharList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LGCharList>(end);
    return o;
  }
};

inline flatbuffers::Offset<LGCharList> CreateLGCharList(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t count = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DACharInfo>>> info = 0) {
  LGCharListBuilder builder_(_fbb);
  builder_.add_info(info);
  builder_.add_count(count);
  return builder_.Finish();
}

inline flatbuffers::Offset<LGCharList> CreateLGCharListDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t count = 0,
    const std::vector<flatbuffers::Offset<DACharInfo>> *info = nullptr) {
  return Packet::Login::CreateLGCharList(
      _fbb,
      count,
      info ? _fbb.CreateVector<flatbuffers::Offset<DACharInfo>>(*info) : 0);
}

inline const Packet::Login::LGCharList *GetLGCharList(const void *buf) {
  return flatbuffers::GetRoot<Packet::Login::LGCharList>(buf);
}

inline const Packet::Login::LGCharList *GetSizePrefixedLGCharList(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Packet::Login::LGCharList>(buf);
}

inline bool VerifyLGCharListBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Packet::Login::LGCharList>(nullptr);
}

inline bool VerifySizePrefixedLGCharListBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Packet::Login::LGCharList>(nullptr);
}

inline void FinishLGCharListBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Login::LGCharList> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedLGCharListBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Login::LGCharList> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Login
}  // namespace Packet

#endif  // FLATBUFFERS_GENERATED_LGCHARLIST_PACKET_LOGIN_H_
