// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LGNEWCHAR_PACKET_LOGIN_H_
#define FLATBUFFERS_GENERATED_LGNEWCHAR_PACKET_LOGIN_H_

#include "flatbuffers/flatbuffers.h"

#include "dacharinfo_generated.h"

namespace Packet {
namespace Login {

struct LGNewChar;

struct LGNewChar FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_INFO = 4
  };
  const DACharInfo *info() const {
    return GetPointer<const DACharInfo *>(VT_INFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_INFO) &&
           verifier.VerifyTable(info()) &&
           verifier.EndTable();
  }
};

struct LGNewCharBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_info(flatbuffers::Offset<DACharInfo> info) {
    fbb_.AddOffset(LGNewChar::VT_INFO, info);
  }
  explicit LGNewCharBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LGNewCharBuilder &operator=(const LGNewCharBuilder &);
  flatbuffers::Offset<LGNewChar> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LGNewChar>(end);
    return o;
  }
};

inline flatbuffers::Offset<LGNewChar> CreateLGNewChar(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<DACharInfo> info = 0) {
  LGNewCharBuilder builder_(_fbb);
  builder_.add_info(info);
  return builder_.Finish();
}

inline const Packet::Login::LGNewChar *GetLGNewChar(const void *buf) {
  return flatbuffers::GetRoot<Packet::Login::LGNewChar>(buf);
}

inline const Packet::Login::LGNewChar *GetSizePrefixedLGNewChar(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Packet::Login::LGNewChar>(buf);
}

inline bool VerifyLGNewCharBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Packet::Login::LGNewChar>(nullptr);
}

inline bool VerifySizePrefixedLGNewCharBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Packet::Login::LGNewChar>(nullptr);
}

inline void FinishLGNewCharBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Login::LGNewChar> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedLGNewCharBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Login::LGNewChar> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Login
}  // namespace Packet

#endif  // FLATBUFFERS_GENERATED_LGNEWCHAR_PACKET_LOGIN_H_
