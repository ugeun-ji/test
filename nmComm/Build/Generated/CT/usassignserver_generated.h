// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_USASSIGNSERVER_PACKET_CLIENT_H_
#define FLATBUFFERS_GENERATED_USASSIGNSERVER_PACKET_CLIENT_H_

#include "flatbuffers/flatbuffers.h"

namespace Packet {
namespace Client {

struct USAssignServer;

struct USAssignServer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DSID = 4,
    VT_CHID = 6,
    VT_HASH = 8
  };
  int32_t dsid() const {
    return GetField<int32_t>(VT_DSID, 0);
  }
  int32_t chid() const {
    return GetField<int32_t>(VT_CHID, 0);
  }
  uint64_t hash() const {
    return GetField<uint64_t>(VT_HASH, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_DSID) &&
           VerifyField<int32_t>(verifier, VT_CHID) &&
           VerifyField<uint64_t>(verifier, VT_HASH) &&
           verifier.EndTable();
  }
};

struct USAssignServerBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_dsid(int32_t dsid) {
    fbb_.AddElement<int32_t>(USAssignServer::VT_DSID, dsid, 0);
  }
  void add_chid(int32_t chid) {
    fbb_.AddElement<int32_t>(USAssignServer::VT_CHID, chid, 0);
  }
  void add_hash(uint64_t hash) {
    fbb_.AddElement<uint64_t>(USAssignServer::VT_HASH, hash, 0);
  }
  explicit USAssignServerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  USAssignServerBuilder &operator=(const USAssignServerBuilder &);
  flatbuffers::Offset<USAssignServer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<USAssignServer>(end);
    return o;
  }
};

inline flatbuffers::Offset<USAssignServer> CreateUSAssignServer(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t dsid = 0,
    int32_t chid = 0,
    uint64_t hash = 0) {
  USAssignServerBuilder builder_(_fbb);
  builder_.add_hash(hash);
  builder_.add_chid(chid);
  builder_.add_dsid(dsid);
  return builder_.Finish();
}

inline const Packet::Client::USAssignServer *GetUSAssignServer(const void *buf) {
  return flatbuffers::GetRoot<Packet::Client::USAssignServer>(buf);
}

inline const Packet::Client::USAssignServer *GetSizePrefixedUSAssignServer(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Packet::Client::USAssignServer>(buf);
}

inline bool VerifyUSAssignServerBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Packet::Client::USAssignServer>(nullptr);
}

inline bool VerifySizePrefixedUSAssignServerBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Packet::Client::USAssignServer>(nullptr);
}

inline void FinishUSAssignServerBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Client::USAssignServer> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedUSAssignServerBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Client::USAssignServer> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Client
}  // namespace Packet

#endif  // FLATBUFFERS_GENERATED_USASSIGNSERVER_PACKET_CLIENT_H_
