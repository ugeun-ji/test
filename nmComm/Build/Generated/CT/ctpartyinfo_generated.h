// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CTPARTYINFO_PACKET_PARTY_H_
#define FLATBUFFERS_GENERATED_CTPARTYINFO_PACKET_PARTY_H_

#include "flatbuffers/flatbuffers.h"

#include "dapartymember_generated.h"

namespace Packet {
namespace Party {

struct PartyServerInfo;

struct CTPartyInfo;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) PartyServerInfo FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t dsid_;
  int32_t chid_;
  uint64_t hash_;

 public:
  PartyServerInfo() {
    memset(this, 0, sizeof(PartyServerInfo));
  }
  PartyServerInfo(int32_t _dsid, int32_t _chid, uint64_t _hash)
      : dsid_(flatbuffers::EndianScalar(_dsid)),
        chid_(flatbuffers::EndianScalar(_chid)),
        hash_(flatbuffers::EndianScalar(_hash)) {
  }
  int32_t dsid() const {
    return flatbuffers::EndianScalar(dsid_);
  }
  int32_t chid() const {
    return flatbuffers::EndianScalar(chid_);
  }
  uint64_t hash() const {
    return flatbuffers::EndianScalar(hash_);
  }
};
FLATBUFFERS_STRUCT_END(PartyServerInfo, 16);

struct CTPartyInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CHID = 4,
    VT_PARTYID = 6,
    VT_MASTERSID = 8,
    VT_MEMBERS = 10,
    VT_SERVER = 12
  };
  int32_t chid() const {
    return GetField<int32_t>(VT_CHID, 0);
  }
  int32_t partyid() const {
    return GetField<int32_t>(VT_PARTYID, 0);
  }
  int32_t mastersid() const {
    return GetField<int32_t>(VT_MASTERSID, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<DAPartyMember>> *members() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<DAPartyMember>> *>(VT_MEMBERS);
  }
  const PartyServerInfo *server() const {
    return GetStruct<const PartyServerInfo *>(VT_SERVER);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_CHID) &&
           VerifyField<int32_t>(verifier, VT_PARTYID) &&
           VerifyField<int32_t>(verifier, VT_MASTERSID) &&
           VerifyOffset(verifier, VT_MEMBERS) &&
           verifier.VerifyVector(members()) &&
           verifier.VerifyVectorOfTables(members()) &&
           VerifyField<PartyServerInfo>(verifier, VT_SERVER) &&
           verifier.EndTable();
  }
};

struct CTPartyInfoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_chid(int32_t chid) {
    fbb_.AddElement<int32_t>(CTPartyInfo::VT_CHID, chid, 0);
  }
  void add_partyid(int32_t partyid) {
    fbb_.AddElement<int32_t>(CTPartyInfo::VT_PARTYID, partyid, 0);
  }
  void add_mastersid(int32_t mastersid) {
    fbb_.AddElement<int32_t>(CTPartyInfo::VT_MASTERSID, mastersid, 0);
  }
  void add_members(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DAPartyMember>>> members) {
    fbb_.AddOffset(CTPartyInfo::VT_MEMBERS, members);
  }
  void add_server(const PartyServerInfo *server) {
    fbb_.AddStruct(CTPartyInfo::VT_SERVER, server);
  }
  explicit CTPartyInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CTPartyInfoBuilder &operator=(const CTPartyInfoBuilder &);
  flatbuffers::Offset<CTPartyInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CTPartyInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<CTPartyInfo> CreateCTPartyInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t chid = 0,
    int32_t partyid = 0,
    int32_t mastersid = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DAPartyMember>>> members = 0,
    const PartyServerInfo *server = 0) {
  CTPartyInfoBuilder builder_(_fbb);
  builder_.add_server(server);
  builder_.add_members(members);
  builder_.add_mastersid(mastersid);
  builder_.add_partyid(partyid);
  builder_.add_chid(chid);
  return builder_.Finish();
}

inline flatbuffers::Offset<CTPartyInfo> CreateCTPartyInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t chid = 0,
    int32_t partyid = 0,
    int32_t mastersid = 0,
    const std::vector<flatbuffers::Offset<DAPartyMember>> *members = nullptr,
    const PartyServerInfo *server = 0) {
  return Packet::Party::CreateCTPartyInfo(
      _fbb,
      chid,
      partyid,
      mastersid,
      members ? _fbb.CreateVector<flatbuffers::Offset<DAPartyMember>>(*members) : 0,
      server);
}

inline const Packet::Party::CTPartyInfo *GetCTPartyInfo(const void *buf) {
  return flatbuffers::GetRoot<Packet::Party::CTPartyInfo>(buf);
}

inline const Packet::Party::CTPartyInfo *GetSizePrefixedCTPartyInfo(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Packet::Party::CTPartyInfo>(buf);
}

inline bool VerifyCTPartyInfoBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Packet::Party::CTPartyInfo>(nullptr);
}

inline bool VerifySizePrefixedCTPartyInfoBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Packet::Party::CTPartyInfo>(nullptr);
}

inline void FinishCTPartyInfoBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Party::CTPartyInfo> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCTPartyInfoBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Party::CTPartyInfo> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Party
}  // namespace Packet

#endif  // FLATBUFFERS_GENERATED_CTPARTYINFO_PACKET_PARTY_H_
