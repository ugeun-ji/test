// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DSPVPCREATEGAMERESULT_PACKET_MATCH_PVP_H_
#define FLATBUFFERS_GENERATED_DSPVPCREATEGAMERESULT_PACKET_MATCH_PVP_H_

#include "flatbuffers/flatbuffers.h"

namespace Packet {
namespace Match {
namespace PvP {

struct DSPvPCreateGameResult;

struct DSPvPCreateGameResult FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_MATCHID = 4,
    VT_RESULT = 6
  };
  int32_t matchid() const {
    return GetField<int32_t>(VT_MATCHID, 0);
  }
  bool result() const {
    return GetField<uint8_t>(VT_RESULT, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_MATCHID) &&
           VerifyField<uint8_t>(verifier, VT_RESULT) &&
           verifier.EndTable();
  }
};

struct DSPvPCreateGameResultBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_matchid(int32_t matchid) {
    fbb_.AddElement<int32_t>(DSPvPCreateGameResult::VT_MATCHID, matchid, 0);
  }
  void add_result(bool result) {
    fbb_.AddElement<uint8_t>(DSPvPCreateGameResult::VT_RESULT, static_cast<uint8_t>(result), 0);
  }
  explicit DSPvPCreateGameResultBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DSPvPCreateGameResultBuilder &operator=(const DSPvPCreateGameResultBuilder &);
  flatbuffers::Offset<DSPvPCreateGameResult> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DSPvPCreateGameResult>(end);
    return o;
  }
};

inline flatbuffers::Offset<DSPvPCreateGameResult> CreateDSPvPCreateGameResult(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t matchid = 0,
    bool result = false) {
  DSPvPCreateGameResultBuilder builder_(_fbb);
  builder_.add_matchid(matchid);
  builder_.add_result(result);
  return builder_.Finish();
}

inline const Packet::Match::PvP::DSPvPCreateGameResult *GetDSPvPCreateGameResult(const void *buf) {
  return flatbuffers::GetRoot<Packet::Match::PvP::DSPvPCreateGameResult>(buf);
}

inline const Packet::Match::PvP::DSPvPCreateGameResult *GetSizePrefixedDSPvPCreateGameResult(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Packet::Match::PvP::DSPvPCreateGameResult>(buf);
}

inline bool VerifyDSPvPCreateGameResultBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Packet::Match::PvP::DSPvPCreateGameResult>(nullptr);
}

inline bool VerifySizePrefixedDSPvPCreateGameResultBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Packet::Match::PvP::DSPvPCreateGameResult>(nullptr);
}

inline void FinishDSPvPCreateGameResultBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Match::PvP::DSPvPCreateGameResult> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDSPvPCreateGameResultBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Match::PvP::DSPvPCreateGameResult> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace PvP
}  // namespace Match
}  // namespace Packet

#endif  // FLATBUFFERS_GENERATED_DSPVPCREATEGAMERESULT_PACKET_MATCH_PVP_H_
