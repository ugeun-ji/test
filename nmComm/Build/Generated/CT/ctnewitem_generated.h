// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CTNEWITEM_PACKET_CHARACTER_H_
#define FLATBUFFERS_GENERATED_CTNEWITEM_PACKET_CHARACTER_H_

#include "flatbuffers/flatbuffers.h"

#include "daequipitem_generated.h"
#include "damaterialitem_generated.h"

namespace Packet {
namespace Character {

struct CTNewItem;

enum NewItem {
  NewItem_NONE = 0,
  NewItem_DAEquipItem = 1,
  NewItem_DAMaterialItem = 2,
  NewItem_MIN = NewItem_NONE,
  NewItem_MAX = NewItem_DAMaterialItem
};

inline const NewItem (&EnumValuesNewItem())[3] {
  static const NewItem values[] = {
    NewItem_NONE,
    NewItem_DAEquipItem,
    NewItem_DAMaterialItem
  };
  return values;
}

inline const char * const *EnumNamesNewItem() {
  static const char * const names[] = {
    "NONE",
    "DAEquipItem",
    "DAMaterialItem",
    nullptr
  };
  return names;
}

inline const char *EnumNameNewItem(NewItem e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesNewItem()[index];
}

template<typename T> struct NewItemTraits {
  static const NewItem enum_value = NewItem_NONE;
};

template<> struct NewItemTraits<DAEquipItem> {
  static const NewItem enum_value = NewItem_DAEquipItem;
};

template<> struct NewItemTraits<DAMaterialItem> {
  static const NewItem enum_value = NewItem_DAMaterialItem;
};

bool VerifyNewItem(flatbuffers::Verifier &verifier, const void *obj, NewItem type);
bool VerifyNewItemVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct CTNewItem FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CHARSID = 4,
    VT_ITEM_TYPE = 6,
    VT_ITEM = 8
  };
  int32_t charsid() const {
    return GetField<int32_t>(VT_CHARSID, 0);
  }
  NewItem item_type() const {
    return static_cast<NewItem>(GetField<uint8_t>(VT_ITEM_TYPE, 0));
  }
  const void *item() const {
    return GetPointer<const void *>(VT_ITEM);
  }
  template<typename T> const T *item_as() const;
  const DAEquipItem *item_as_DAEquipItem() const {
    return item_type() == NewItem_DAEquipItem ? static_cast<const DAEquipItem *>(item()) : nullptr;
  }
  const DAMaterialItem *item_as_DAMaterialItem() const {
    return item_type() == NewItem_DAMaterialItem ? static_cast<const DAMaterialItem *>(item()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_CHARSID) &&
           VerifyField<uint8_t>(verifier, VT_ITEM_TYPE) &&
           VerifyOffset(verifier, VT_ITEM) &&
           VerifyNewItem(verifier, item(), item_type()) &&
           verifier.EndTable();
  }
};

template<> inline const DAEquipItem *CTNewItem::item_as<DAEquipItem>() const {
  return item_as_DAEquipItem();
}

template<> inline const DAMaterialItem *CTNewItem::item_as<DAMaterialItem>() const {
  return item_as_DAMaterialItem();
}

struct CTNewItemBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_charsid(int32_t charsid) {
    fbb_.AddElement<int32_t>(CTNewItem::VT_CHARSID, charsid, 0);
  }
  void add_item_type(NewItem item_type) {
    fbb_.AddElement<uint8_t>(CTNewItem::VT_ITEM_TYPE, static_cast<uint8_t>(item_type), 0);
  }
  void add_item(flatbuffers::Offset<void> item) {
    fbb_.AddOffset(CTNewItem::VT_ITEM, item);
  }
  explicit CTNewItemBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CTNewItemBuilder &operator=(const CTNewItemBuilder &);
  flatbuffers::Offset<CTNewItem> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CTNewItem>(end);
    return o;
  }
};

inline flatbuffers::Offset<CTNewItem> CreateCTNewItem(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t charsid = 0,
    NewItem item_type = NewItem_NONE,
    flatbuffers::Offset<void> item = 0) {
  CTNewItemBuilder builder_(_fbb);
  builder_.add_item(item);
  builder_.add_charsid(charsid);
  builder_.add_item_type(item_type);
  return builder_.Finish();
}

inline bool VerifyNewItem(flatbuffers::Verifier &verifier, const void *obj, NewItem type) {
  switch (type) {
    case NewItem_NONE: {
      return true;
    }
    case NewItem_DAEquipItem: {
      return true;
    }
    case NewItem_DAMaterialItem: {
      return true;
    }
    default: return false;
  }
}

inline bool VerifyNewItemVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyNewItem(
        verifier,  values->Get(i), types->GetEnum<NewItem>(i))) {
      return false;
    }
  }
  return true;
}

inline const Packet::Character::CTNewItem *GetCTNewItem(const void *buf) {
  return flatbuffers::GetRoot<Packet::Character::CTNewItem>(buf);
}

inline const Packet::Character::CTNewItem *GetSizePrefixedCTNewItem(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Packet::Character::CTNewItem>(buf);
}

inline bool VerifyCTNewItemBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Packet::Character::CTNewItem>(nullptr);
}

inline bool VerifySizePrefixedCTNewItemBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Packet::Character::CTNewItem>(nullptr);
}

inline void FinishCTNewItemBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Character::CTNewItem> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCTNewItemBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Character::CTNewItem> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Character
}  // namespace Packet

#endif  // FLATBUFFERS_GENERATED_CTNEWITEM_PACKET_CHARACTER_H_
