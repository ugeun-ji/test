// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CTEQUIPUNEQUIP_PACKET_CHARACTER_H_
#define FLATBUFFERS_GENERATED_CTEQUIPUNEQUIP_PACKET_CHARACTER_H_

#include "flatbuffers/flatbuffers.h"

namespace Packet {
namespace Character {

struct CTEquipUnequip;

struct CTEquipUnequip FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CHARSID = 4,
    VT_SLOT = 6,
    VT_MODE = 8,
    VT_EQ = 10
  };
  int32_t charsid() const {
    return GetField<int32_t>(VT_CHARSID, 0);
  }
  int8_t slot() const {
    return GetField<int8_t>(VT_SLOT, 0);
  }
  int8_t mode() const {
    return GetField<int8_t>(VT_MODE, 0);
  }
  const flatbuffers::Vector<int64_t> *eq() const {
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_EQ);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_CHARSID) &&
           VerifyField<int8_t>(verifier, VT_SLOT) &&
           VerifyField<int8_t>(verifier, VT_MODE) &&
           VerifyOffset(verifier, VT_EQ) &&
           verifier.VerifyVector(eq()) &&
           verifier.EndTable();
  }
};

struct CTEquipUnequipBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_charsid(int32_t charsid) {
    fbb_.AddElement<int32_t>(CTEquipUnequip::VT_CHARSID, charsid, 0);
  }
  void add_slot(int8_t slot) {
    fbb_.AddElement<int8_t>(CTEquipUnequip::VT_SLOT, slot, 0);
  }
  void add_mode(int8_t mode) {
    fbb_.AddElement<int8_t>(CTEquipUnequip::VT_MODE, mode, 0);
  }
  void add_eq(flatbuffers::Offset<flatbuffers::Vector<int64_t>> eq) {
    fbb_.AddOffset(CTEquipUnequip::VT_EQ, eq);
  }
  explicit CTEquipUnequipBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CTEquipUnequipBuilder &operator=(const CTEquipUnequipBuilder &);
  flatbuffers::Offset<CTEquipUnequip> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CTEquipUnequip>(end);
    return o;
  }
};

inline flatbuffers::Offset<CTEquipUnequip> CreateCTEquipUnequip(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t charsid = 0,
    int8_t slot = 0,
    int8_t mode = 0,
    flatbuffers::Offset<flatbuffers::Vector<int64_t>> eq = 0) {
  CTEquipUnequipBuilder builder_(_fbb);
  builder_.add_eq(eq);
  builder_.add_charsid(charsid);
  builder_.add_mode(mode);
  builder_.add_slot(slot);
  return builder_.Finish();
}

inline flatbuffers::Offset<CTEquipUnequip> CreateCTEquipUnequipDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t charsid = 0,
    int8_t slot = 0,
    int8_t mode = 0,
    const std::vector<int64_t> *eq = nullptr) {
  return Packet::Character::CreateCTEquipUnequip(
      _fbb,
      charsid,
      slot,
      mode,
      eq ? _fbb.CreateVector<int64_t>(*eq) : 0);
}

inline const Packet::Character::CTEquipUnequip *GetCTEquipUnequip(const void *buf) {
  return flatbuffers::GetRoot<Packet::Character::CTEquipUnequip>(buf);
}

inline const Packet::Character::CTEquipUnequip *GetSizePrefixedCTEquipUnequip(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Packet::Character::CTEquipUnequip>(buf);
}

inline bool VerifyCTEquipUnequipBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Packet::Character::CTEquipUnequip>(nullptr);
}

inline bool VerifySizePrefixedCTEquipUnequipBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Packet::Character::CTEquipUnequip>(nullptr);
}

inline void FinishCTEquipUnequipBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Character::CTEquipUnequip> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCTEquipUnequipBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Character::CTEquipUnequip> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Character
}  // namespace Packet

#endif  // FLATBUFFERS_GENERATED_CTEQUIPUNEQUIP_PACKET_CHARACTER_H_
