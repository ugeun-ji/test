// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CTALLOCPARTYCHANNEL_PACKET_PARTY_H_
#define FLATBUFFERS_GENERATED_CTALLOCPARTYCHANNEL_PACKET_PARTY_H_

#include "flatbuffers/flatbuffers.h"

namespace Packet {
namespace Party {

struct CTAllocPartyChannel;

struct CTAllocPartyChannel FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DSID = 4,
    VT_CHID = 6,
    VT_HASH = 8,
    VT_CHARSID = 10
  };
  int32_t dsid() const {
    return GetField<int32_t>(VT_DSID, 0);
  }
  int32_t chid() const {
    return GetField<int32_t>(VT_CHID, 0);
  }
  uint64_t hash() const {
    return GetField<uint64_t>(VT_HASH, 0);
  }
  int32_t charsid() const {
    return GetField<int32_t>(VT_CHARSID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_DSID) &&
           VerifyField<int32_t>(verifier, VT_CHID) &&
           VerifyField<uint64_t>(verifier, VT_HASH) &&
           VerifyField<int32_t>(verifier, VT_CHARSID) &&
           verifier.EndTable();
  }
};

struct CTAllocPartyChannelBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_dsid(int32_t dsid) {
    fbb_.AddElement<int32_t>(CTAllocPartyChannel::VT_DSID, dsid, 0);
  }
  void add_chid(int32_t chid) {
    fbb_.AddElement<int32_t>(CTAllocPartyChannel::VT_CHID, chid, 0);
  }
  void add_hash(uint64_t hash) {
    fbb_.AddElement<uint64_t>(CTAllocPartyChannel::VT_HASH, hash, 0);
  }
  void add_charsid(int32_t charsid) {
    fbb_.AddElement<int32_t>(CTAllocPartyChannel::VT_CHARSID, charsid, 0);
  }
  explicit CTAllocPartyChannelBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CTAllocPartyChannelBuilder &operator=(const CTAllocPartyChannelBuilder &);
  flatbuffers::Offset<CTAllocPartyChannel> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CTAllocPartyChannel>(end);
    return o;
  }
};

inline flatbuffers::Offset<CTAllocPartyChannel> CreateCTAllocPartyChannel(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t dsid = 0,
    int32_t chid = 0,
    uint64_t hash = 0,
    int32_t charsid = 0) {
  CTAllocPartyChannelBuilder builder_(_fbb);
  builder_.add_hash(hash);
  builder_.add_charsid(charsid);
  builder_.add_chid(chid);
  builder_.add_dsid(dsid);
  return builder_.Finish();
}

inline const Packet::Party::CTAllocPartyChannel *GetCTAllocPartyChannel(const void *buf) {
  return flatbuffers::GetRoot<Packet::Party::CTAllocPartyChannel>(buf);
}

inline const Packet::Party::CTAllocPartyChannel *GetSizePrefixedCTAllocPartyChannel(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Packet::Party::CTAllocPartyChannel>(buf);
}

inline bool VerifyCTAllocPartyChannelBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Packet::Party::CTAllocPartyChannel>(nullptr);
}

inline bool VerifySizePrefixedCTAllocPartyChannelBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Packet::Party::CTAllocPartyChannel>(nullptr);
}

inline void FinishCTAllocPartyChannelBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Party::CTAllocPartyChannel> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCTAllocPartyChannelBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Party::CTAllocPartyChannel> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Party
}  // namespace Packet

#endif  // FLATBUFFERS_GENERATED_CTALLOCPARTYCHANNEL_PACKET_PARTY_H_
