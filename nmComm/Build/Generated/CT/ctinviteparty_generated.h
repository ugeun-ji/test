// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CTINVITEPARTY_PACKET_PARTY_H_
#define FLATBUFFERS_GENERATED_CTINVITEPARTY_PACKET_PARTY_H_

#include "flatbuffers/flatbuffers.h"

namespace Packet {
namespace Party {

struct CTInviteParty;

struct CTInviteParty FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DSID = 4,
    VT_IP = 6,
    VT_PORT = 8,
    VT_PID = 10,
    VT_OWNER = 12,
    VT_CHARID = 14
  };
  int32_t dsid() const {
    return GetField<int32_t>(VT_DSID, 0);
  }
  const flatbuffers::String *ip() const {
    return GetPointer<const flatbuffers::String *>(VT_IP);
  }
  uint32_t port() const {
    return GetField<uint32_t>(VT_PORT, 0);
  }
  int32_t pid() const {
    return GetField<int32_t>(VT_PID, 0);
  }
  const flatbuffers::String *owner() const {
    return GetPointer<const flatbuffers::String *>(VT_OWNER);
  }
  int32_t charid() const {
    return GetField<int32_t>(VT_CHARID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_DSID) &&
           VerifyOffset(verifier, VT_IP) &&
           verifier.VerifyString(ip()) &&
           VerifyField<uint32_t>(verifier, VT_PORT) &&
           VerifyField<int32_t>(verifier, VT_PID) &&
           VerifyOffset(verifier, VT_OWNER) &&
           verifier.VerifyString(owner()) &&
           VerifyField<int32_t>(verifier, VT_CHARID) &&
           verifier.EndTable();
  }
};

struct CTInvitePartyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_dsid(int32_t dsid) {
    fbb_.AddElement<int32_t>(CTInviteParty::VT_DSID, dsid, 0);
  }
  void add_ip(flatbuffers::Offset<flatbuffers::String> ip) {
    fbb_.AddOffset(CTInviteParty::VT_IP, ip);
  }
  void add_port(uint32_t port) {
    fbb_.AddElement<uint32_t>(CTInviteParty::VT_PORT, port, 0);
  }
  void add_pid(int32_t pid) {
    fbb_.AddElement<int32_t>(CTInviteParty::VT_PID, pid, 0);
  }
  void add_owner(flatbuffers::Offset<flatbuffers::String> owner) {
    fbb_.AddOffset(CTInviteParty::VT_OWNER, owner);
  }
  void add_charid(int32_t charid) {
    fbb_.AddElement<int32_t>(CTInviteParty::VT_CHARID, charid, 0);
  }
  explicit CTInvitePartyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CTInvitePartyBuilder &operator=(const CTInvitePartyBuilder &);
  flatbuffers::Offset<CTInviteParty> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CTInviteParty>(end);
    return o;
  }
};

inline flatbuffers::Offset<CTInviteParty> CreateCTInviteParty(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t dsid = 0,
    flatbuffers::Offset<flatbuffers::String> ip = 0,
    uint32_t port = 0,
    int32_t pid = 0,
    flatbuffers::Offset<flatbuffers::String> owner = 0,
    int32_t charid = 0) {
  CTInvitePartyBuilder builder_(_fbb);
  builder_.add_charid(charid);
  builder_.add_owner(owner);
  builder_.add_pid(pid);
  builder_.add_port(port);
  builder_.add_ip(ip);
  builder_.add_dsid(dsid);
  return builder_.Finish();
}

inline flatbuffers::Offset<CTInviteParty> CreateCTInvitePartyDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t dsid = 0,
    const char *ip = nullptr,
    uint32_t port = 0,
    int32_t pid = 0,
    const char *owner = nullptr,
    int32_t charid = 0) {
  return Packet::Party::CreateCTInviteParty(
      _fbb,
      dsid,
      ip ? _fbb.CreateString(ip) : 0,
      port,
      pid,
      owner ? _fbb.CreateString(owner) : 0,
      charid);
}

inline const Packet::Party::CTInviteParty *GetCTInviteParty(const void *buf) {
  return flatbuffers::GetRoot<Packet::Party::CTInviteParty>(buf);
}

inline const Packet::Party::CTInviteParty *GetSizePrefixedCTInviteParty(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Packet::Party::CTInviteParty>(buf);
}

inline bool VerifyCTInvitePartyBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Packet::Party::CTInviteParty>(nullptr);
}

inline bool VerifySizePrefixedCTInvitePartyBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Packet::Party::CTInviteParty>(nullptr);
}

inline void FinishCTInvitePartyBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Party::CTInviteParty> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCTInvitePartyBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Party::CTInviteParty> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Party
}  // namespace Packet

#endif  // FLATBUFFERS_GENERATED_CTINVITEPARTY_PACKET_PARTY_H_
