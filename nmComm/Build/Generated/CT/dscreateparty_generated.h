// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DSCREATEPARTY_PACKET_PARTY_H_
#define FLATBUFFERS_GENERATED_DSCREATEPARTY_PACKET_PARTY_H_

#include "flatbuffers/flatbuffers.h"

namespace Packet {
namespace Party {

struct DSCreateParty;

struct DSCreateParty FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CREATOR = 4,
    VT_INVITE = 6
  };
  int32_t creator() const {
    return GetField<int32_t>(VT_CREATOR, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *invite() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_INVITE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_CREATOR) &&
           VerifyOffset(verifier, VT_INVITE) &&
           verifier.VerifyVector(invite()) &&
           verifier.VerifyVectorOfStrings(invite()) &&
           verifier.EndTable();
  }
};

struct DSCreatePartyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_creator(int32_t creator) {
    fbb_.AddElement<int32_t>(DSCreateParty::VT_CREATOR, creator, 0);
  }
  void add_invite(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> invite) {
    fbb_.AddOffset(DSCreateParty::VT_INVITE, invite);
  }
  explicit DSCreatePartyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DSCreatePartyBuilder &operator=(const DSCreatePartyBuilder &);
  flatbuffers::Offset<DSCreateParty> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DSCreateParty>(end);
    return o;
  }
};

inline flatbuffers::Offset<DSCreateParty> CreateDSCreateParty(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t creator = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> invite = 0) {
  DSCreatePartyBuilder builder_(_fbb);
  builder_.add_invite(invite);
  builder_.add_creator(creator);
  return builder_.Finish();
}

inline flatbuffers::Offset<DSCreateParty> CreateDSCreatePartyDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t creator = 0,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *invite = nullptr) {
  return Packet::Party::CreateDSCreateParty(
      _fbb,
      creator,
      invite ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*invite) : 0);
}

inline const Packet::Party::DSCreateParty *GetDSCreateParty(const void *buf) {
  return flatbuffers::GetRoot<Packet::Party::DSCreateParty>(buf);
}

inline const Packet::Party::DSCreateParty *GetSizePrefixedDSCreateParty(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Packet::Party::DSCreateParty>(buf);
}

inline bool VerifyDSCreatePartyBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Packet::Party::DSCreateParty>(nullptr);
}

inline bool VerifySizePrefixedDSCreatePartyBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Packet::Party::DSCreateParty>(nullptr);
}

inline void FinishDSCreatePartyBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Party::DSCreateParty> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDSCreatePartyBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Party::DSCreateParty> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Party
}  // namespace Packet

#endif  // FLATBUFFERS_GENERATED_DSCREATEPARTY_PACKET_PARTY_H_
