// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CTPVPCREATEGAME_PACKET_MATCH_PVP_H_
#define FLATBUFFERS_GENERATED_CTPVPCREATEGAME_PACKET_MATCH_PVP_H_

#include "flatbuffers/flatbuffers.h"

namespace Packet {
namespace Match {
namespace PvP {

struct PvPMatchedMember;

struct CTPvPCreateGame;

struct PvPMatchedMember FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CHARSID = 4,
    VT_TEAM = 6
  };
  int32_t charsid() const {
    return GetField<int32_t>(VT_CHARSID, 0);
  }
  int32_t team() const {
    return GetField<int32_t>(VT_TEAM, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_CHARSID) &&
           VerifyField<int32_t>(verifier, VT_TEAM) &&
           verifier.EndTable();
  }
};

struct PvPMatchedMemberBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_charsid(int32_t charsid) {
    fbb_.AddElement<int32_t>(PvPMatchedMember::VT_CHARSID, charsid, 0);
  }
  void add_team(int32_t team) {
    fbb_.AddElement<int32_t>(PvPMatchedMember::VT_TEAM, team, 0);
  }
  explicit PvPMatchedMemberBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PvPMatchedMemberBuilder &operator=(const PvPMatchedMemberBuilder &);
  flatbuffers::Offset<PvPMatchedMember> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PvPMatchedMember>(end);
    return o;
  }
};

inline flatbuffers::Offset<PvPMatchedMember> CreatePvPMatchedMember(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t charsid = 0,
    int32_t team = 0) {
  PvPMatchedMemberBuilder builder_(_fbb);
  builder_.add_team(team);
  builder_.add_charsid(charsid);
  return builder_.Finish();
}

struct CTPvPCreateGame FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CHANNEL = 4,
    VT_MATCHID = 6,
    VT_MEMBERS = 8
  };
  int32_t channel() const {
    return GetField<int32_t>(VT_CHANNEL, 0);
  }
  int32_t matchid() const {
    return GetField<int32_t>(VT_MATCHID, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<PvPMatchedMember>> *members() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<PvPMatchedMember>> *>(VT_MEMBERS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_CHANNEL) &&
           VerifyField<int32_t>(verifier, VT_MATCHID) &&
           VerifyOffset(verifier, VT_MEMBERS) &&
           verifier.VerifyVector(members()) &&
           verifier.VerifyVectorOfTables(members()) &&
           verifier.EndTable();
  }
};

struct CTPvPCreateGameBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_channel(int32_t channel) {
    fbb_.AddElement<int32_t>(CTPvPCreateGame::VT_CHANNEL, channel, 0);
  }
  void add_matchid(int32_t matchid) {
    fbb_.AddElement<int32_t>(CTPvPCreateGame::VT_MATCHID, matchid, 0);
  }
  void add_members(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<PvPMatchedMember>>> members) {
    fbb_.AddOffset(CTPvPCreateGame::VT_MEMBERS, members);
  }
  explicit CTPvPCreateGameBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CTPvPCreateGameBuilder &operator=(const CTPvPCreateGameBuilder &);
  flatbuffers::Offset<CTPvPCreateGame> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CTPvPCreateGame>(end);
    return o;
  }
};

inline flatbuffers::Offset<CTPvPCreateGame> CreateCTPvPCreateGame(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t channel = 0,
    int32_t matchid = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<PvPMatchedMember>>> members = 0) {
  CTPvPCreateGameBuilder builder_(_fbb);
  builder_.add_members(members);
  builder_.add_matchid(matchid);
  builder_.add_channel(channel);
  return builder_.Finish();
}

inline flatbuffers::Offset<CTPvPCreateGame> CreateCTPvPCreateGameDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t channel = 0,
    int32_t matchid = 0,
    const std::vector<flatbuffers::Offset<PvPMatchedMember>> *members = nullptr) {
  return Packet::Match::PvP::CreateCTPvPCreateGame(
      _fbb,
      channel,
      matchid,
      members ? _fbb.CreateVector<flatbuffers::Offset<PvPMatchedMember>>(*members) : 0);
}

inline const Packet::Match::PvP::CTPvPCreateGame *GetCTPvPCreateGame(const void *buf) {
  return flatbuffers::GetRoot<Packet::Match::PvP::CTPvPCreateGame>(buf);
}

inline const Packet::Match::PvP::CTPvPCreateGame *GetSizePrefixedCTPvPCreateGame(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Packet::Match::PvP::CTPvPCreateGame>(buf);
}

inline bool VerifyCTPvPCreateGameBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Packet::Match::PvP::CTPvPCreateGame>(nullptr);
}

inline bool VerifySizePrefixedCTPvPCreateGameBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Packet::Match::PvP::CTPvPCreateGame>(nullptr);
}

inline void FinishCTPvPCreateGameBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Match::PvP::CTPvPCreateGame> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCTPvPCreateGameBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Match::PvP::CTPvPCreateGame> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace PvP
}  // namespace Match
}  // namespace Packet

#endif  // FLATBUFFERS_GENERATED_CTPVPCREATEGAME_PACKET_MATCH_PVP_H_
