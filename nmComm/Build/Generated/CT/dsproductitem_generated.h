// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DSPRODUCTITEM_PACKET_CHARACTER_H_
#define FLATBUFFERS_GENERATED_DSPRODUCTITEM_PACKET_CHARACTER_H_

#include "flatbuffers/flatbuffers.h"

namespace Packet {
namespace Character {

struct DSProductItem;

struct DSProductItem FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CHARSID = 4,
    VT_TRANSACTION = 6,
    VT_TYPE = 8,
    VT_ID = 10,
    VT_TIER = 12
  };
  int32_t charsid() const {
    return GetField<int32_t>(VT_CHARSID, 0);
  }
  int32_t transaction() const {
    return GetField<int32_t>(VT_TRANSACTION, 0);
  }
  int8_t type() const {
    return GetField<int8_t>(VT_TYPE, 0);
  }
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  int16_t tier() const {
    return GetField<int16_t>(VT_TIER, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_CHARSID) &&
           VerifyField<int32_t>(verifier, VT_TRANSACTION) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           VerifyField<int16_t>(verifier, VT_TIER) &&
           verifier.EndTable();
  }
};

struct DSProductItemBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_charsid(int32_t charsid) {
    fbb_.AddElement<int32_t>(DSProductItem::VT_CHARSID, charsid, 0);
  }
  void add_transaction(int32_t transaction) {
    fbb_.AddElement<int32_t>(DSProductItem::VT_TRANSACTION, transaction, 0);
  }
  void add_type(int8_t type) {
    fbb_.AddElement<int8_t>(DSProductItem::VT_TYPE, type, 0);
  }
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(DSProductItem::VT_ID, id, 0);
  }
  void add_tier(int16_t tier) {
    fbb_.AddElement<int16_t>(DSProductItem::VT_TIER, tier, 0);
  }
  explicit DSProductItemBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DSProductItemBuilder &operator=(const DSProductItemBuilder &);
  flatbuffers::Offset<DSProductItem> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DSProductItem>(end);
    return o;
  }
};

inline flatbuffers::Offset<DSProductItem> CreateDSProductItem(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t charsid = 0,
    int32_t transaction = 0,
    int8_t type = 0,
    int32_t id = 0,
    int16_t tier = 0) {
  DSProductItemBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_transaction(transaction);
  builder_.add_charsid(charsid);
  builder_.add_tier(tier);
  builder_.add_type(type);
  return builder_.Finish();
}

inline const Packet::Character::DSProductItem *GetDSProductItem(const void *buf) {
  return flatbuffers::GetRoot<Packet::Character::DSProductItem>(buf);
}

inline const Packet::Character::DSProductItem *GetSizePrefixedDSProductItem(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Packet::Character::DSProductItem>(buf);
}

inline bool VerifyDSProductItemBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Packet::Character::DSProductItem>(nullptr);
}

inline bool VerifySizePrefixedDSProductItemBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Packet::Character::DSProductItem>(nullptr);
}

inline void FinishDSProductItemBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Character::DSProductItem> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDSProductItemBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Character::DSProductItem> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Character
}  // namespace Packet

#endif  // FLATBUFFERS_GENERATED_DSPRODUCTITEM_PACKET_CHARACTER_H_
