// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DSALLOCCHANNEL_PACKET_CHANNEL_H_
#define FLATBUFFERS_GENERATED_DSALLOCCHANNEL_PACKET_CHANNEL_H_

#include "flatbuffers/flatbuffers.h"

#include "daregister_generated.h"

namespace Packet {
namespace Channel {

struct DSAllocChannel;

struct DSAllocChannel FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CHARSID = 4,
    VT_PUBLICCH = 6,
    VT_GAME = 8
  };
  int32_t charsid() const {
    return GetField<int32_t>(VT_CHARSID, 0);
  }
  bool publicch() const {
    return GetField<uint8_t>(VT_PUBLICCH, 0) != 0;
  }
  Packet::Certify::DSType game() const {
    return static_cast<Packet::Certify::DSType>(GetField<uint8_t>(VT_GAME, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_CHARSID) &&
           VerifyField<uint8_t>(verifier, VT_PUBLICCH) &&
           VerifyField<uint8_t>(verifier, VT_GAME) &&
           verifier.EndTable();
  }
};

struct DSAllocChannelBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_charsid(int32_t charsid) {
    fbb_.AddElement<int32_t>(DSAllocChannel::VT_CHARSID, charsid, 0);
  }
  void add_publicch(bool publicch) {
    fbb_.AddElement<uint8_t>(DSAllocChannel::VT_PUBLICCH, static_cast<uint8_t>(publicch), 0);
  }
  void add_game(Packet::Certify::DSType game) {
    fbb_.AddElement<uint8_t>(DSAllocChannel::VT_GAME, static_cast<uint8_t>(game), 0);
  }
  explicit DSAllocChannelBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DSAllocChannelBuilder &operator=(const DSAllocChannelBuilder &);
  flatbuffers::Offset<DSAllocChannel> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DSAllocChannel>(end);
    return o;
  }
};

inline flatbuffers::Offset<DSAllocChannel> CreateDSAllocChannel(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t charsid = 0,
    bool publicch = false,
    Packet::Certify::DSType game = Packet::Certify::DSType_Field) {
  DSAllocChannelBuilder builder_(_fbb);
  builder_.add_charsid(charsid);
  builder_.add_game(game);
  builder_.add_publicch(publicch);
  return builder_.Finish();
}

inline const Packet::Channel::DSAllocChannel *GetDSAllocChannel(const void *buf) {
  return flatbuffers::GetRoot<Packet::Channel::DSAllocChannel>(buf);
}

inline const Packet::Channel::DSAllocChannel *GetSizePrefixedDSAllocChannel(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Packet::Channel::DSAllocChannel>(buf);
}

inline bool VerifyDSAllocChannelBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Packet::Channel::DSAllocChannel>(nullptr);
}

inline bool VerifySizePrefixedDSAllocChannelBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Packet::Channel::DSAllocChannel>(nullptr);
}

inline void FinishDSAllocChannelBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Channel::DSAllocChannel> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDSAllocChannelBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Channel::DSAllocChannel> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Channel
}  // namespace Packet

#endif  // FLATBUFFERS_GENERATED_DSALLOCCHANNEL_PACKET_CHANNEL_H_
