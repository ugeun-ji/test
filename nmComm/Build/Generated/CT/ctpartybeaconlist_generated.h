// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CTPARTYBEACONLIST_PACKET_PARTY_H_
#define FLATBUFFERS_GENERATED_CTPARTYBEACONLIST_PACKET_PARTY_H_

#include "flatbuffers/flatbuffers.h"

namespace Packet {
namespace Party {

struct DAPartyBeaconInfo;

struct CTPartyBeaconList;

struct DAPartyBeaconInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_QUESTID = 6,
    VT_INVITATIONSID = 8
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  int32_t questid() const {
    return GetField<int32_t>(VT_QUESTID, 0);
  }
  int32_t invitationsid() const {
    return GetField<int32_t>(VT_INVITATIONSID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int32_t>(verifier, VT_QUESTID) &&
           VerifyField<int32_t>(verifier, VT_INVITATIONSID) &&
           verifier.EndTable();
  }
};

struct DAPartyBeaconInfoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(DAPartyBeaconInfo::VT_NAME, name);
  }
  void add_questid(int32_t questid) {
    fbb_.AddElement<int32_t>(DAPartyBeaconInfo::VT_QUESTID, questid, 0);
  }
  void add_invitationsid(int32_t invitationsid) {
    fbb_.AddElement<int32_t>(DAPartyBeaconInfo::VT_INVITATIONSID, invitationsid, 0);
  }
  explicit DAPartyBeaconInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DAPartyBeaconInfoBuilder &operator=(const DAPartyBeaconInfoBuilder &);
  flatbuffers::Offset<DAPartyBeaconInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DAPartyBeaconInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<DAPartyBeaconInfo> CreateDAPartyBeaconInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int32_t questid = 0,
    int32_t invitationsid = 0) {
  DAPartyBeaconInfoBuilder builder_(_fbb);
  builder_.add_invitationsid(invitationsid);
  builder_.add_questid(questid);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<DAPartyBeaconInfo> CreateDAPartyBeaconInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    int32_t questid = 0,
    int32_t invitationsid = 0) {
  return Packet::Party::CreateDAPartyBeaconInfo(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      questid,
      invitationsid);
}

struct CTPartyBeaconList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CHID = 4,
    VT_CHARSID = 6,
    VT_REQLIST = 8
  };
  int32_t chid() const {
    return GetField<int32_t>(VT_CHID, 0);
  }
  int32_t charsid() const {
    return GetField<int32_t>(VT_CHARSID, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<DAPartyBeaconInfo>> *reqlist() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<DAPartyBeaconInfo>> *>(VT_REQLIST);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_CHID) &&
           VerifyField<int32_t>(verifier, VT_CHARSID) &&
           VerifyOffset(verifier, VT_REQLIST) &&
           verifier.VerifyVector(reqlist()) &&
           verifier.VerifyVectorOfTables(reqlist()) &&
           verifier.EndTable();
  }
};

struct CTPartyBeaconListBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_chid(int32_t chid) {
    fbb_.AddElement<int32_t>(CTPartyBeaconList::VT_CHID, chid, 0);
  }
  void add_charsid(int32_t charsid) {
    fbb_.AddElement<int32_t>(CTPartyBeaconList::VT_CHARSID, charsid, 0);
  }
  void add_reqlist(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DAPartyBeaconInfo>>> reqlist) {
    fbb_.AddOffset(CTPartyBeaconList::VT_REQLIST, reqlist);
  }
  explicit CTPartyBeaconListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CTPartyBeaconListBuilder &operator=(const CTPartyBeaconListBuilder &);
  flatbuffers::Offset<CTPartyBeaconList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CTPartyBeaconList>(end);
    return o;
  }
};

inline flatbuffers::Offset<CTPartyBeaconList> CreateCTPartyBeaconList(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t chid = 0,
    int32_t charsid = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DAPartyBeaconInfo>>> reqlist = 0) {
  CTPartyBeaconListBuilder builder_(_fbb);
  builder_.add_reqlist(reqlist);
  builder_.add_charsid(charsid);
  builder_.add_chid(chid);
  return builder_.Finish();
}

inline flatbuffers::Offset<CTPartyBeaconList> CreateCTPartyBeaconListDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t chid = 0,
    int32_t charsid = 0,
    const std::vector<flatbuffers::Offset<DAPartyBeaconInfo>> *reqlist = nullptr) {
  return Packet::Party::CreateCTPartyBeaconList(
      _fbb,
      chid,
      charsid,
      reqlist ? _fbb.CreateVector<flatbuffers::Offset<DAPartyBeaconInfo>>(*reqlist) : 0);
}

inline const Packet::Party::CTPartyBeaconList *GetCTPartyBeaconList(const void *buf) {
  return flatbuffers::GetRoot<Packet::Party::CTPartyBeaconList>(buf);
}

inline const Packet::Party::CTPartyBeaconList *GetSizePrefixedCTPartyBeaconList(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Packet::Party::CTPartyBeaconList>(buf);
}

inline bool VerifyCTPartyBeaconListBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Packet::Party::CTPartyBeaconList>(nullptr);
}

inline bool VerifySizePrefixedCTPartyBeaconListBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Packet::Party::CTPartyBeaconList>(nullptr);
}

inline void FinishCTPartyBeaconListBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Party::CTPartyBeaconList> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCTPartyBeaconListBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Party::CTPartyBeaconList> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Party
}  // namespace Packet

#endif  // FLATBUFFERS_GENERATED_CTPARTYBEACONLIST_PACKET_PARTY_H_
