// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CTUPDATEITEM_PACKET_CHARACTER_H_
#define FLATBUFFERS_GENERATED_CTUPDATEITEM_PACKET_CHARACTER_H_

#include "flatbuffers/flatbuffers.h"

#include "daequipitem_generated.h"
#include "damaterialitem_generated.h"

namespace Packet {
namespace Character {

struct CTUpdateItem;

enum UpdatedItem {
  UpdatedItem_NONE = 0,
  UpdatedItem_DAEquipItem = 1,
  UpdatedItem_DAMaterialItem = 2,
  UpdatedItem_MIN = UpdatedItem_NONE,
  UpdatedItem_MAX = UpdatedItem_DAMaterialItem
};

inline const UpdatedItem (&EnumValuesUpdatedItem())[3] {
  static const UpdatedItem values[] = {
    UpdatedItem_NONE,
    UpdatedItem_DAEquipItem,
    UpdatedItem_DAMaterialItem
  };
  return values;
}

inline const char * const *EnumNamesUpdatedItem() {
  static const char * const names[] = {
    "NONE",
    "DAEquipItem",
    "DAMaterialItem",
    nullptr
  };
  return names;
}

inline const char *EnumNameUpdatedItem(UpdatedItem e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesUpdatedItem()[index];
}

template<typename T> struct UpdatedItemTraits {
  static const UpdatedItem enum_value = UpdatedItem_NONE;
};

template<> struct UpdatedItemTraits<DAEquipItem> {
  static const UpdatedItem enum_value = UpdatedItem_DAEquipItem;
};

template<> struct UpdatedItemTraits<DAMaterialItem> {
  static const UpdatedItem enum_value = UpdatedItem_DAMaterialItem;
};

bool VerifyUpdatedItem(flatbuffers::Verifier &verifier, const void *obj, UpdatedItem type);
bool VerifyUpdatedItemVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct CTUpdateItem FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CHARSID = 4,
    VT_UPDATED_TYPE = 6,
    VT_UPDATED = 8
  };
  int32_t charsid() const {
    return GetField<int32_t>(VT_CHARSID, 0);
  }
  UpdatedItem updated_type() const {
    return static_cast<UpdatedItem>(GetField<uint8_t>(VT_UPDATED_TYPE, 0));
  }
  const void *updated() const {
    return GetPointer<const void *>(VT_UPDATED);
  }
  template<typename T> const T *updated_as() const;
  const DAEquipItem *updated_as_DAEquipItem() const {
    return updated_type() == UpdatedItem_DAEquipItem ? static_cast<const DAEquipItem *>(updated()) : nullptr;
  }
  const DAMaterialItem *updated_as_DAMaterialItem() const {
    return updated_type() == UpdatedItem_DAMaterialItem ? static_cast<const DAMaterialItem *>(updated()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_CHARSID) &&
           VerifyField<uint8_t>(verifier, VT_UPDATED_TYPE) &&
           VerifyOffset(verifier, VT_UPDATED) &&
           VerifyUpdatedItem(verifier, updated(), updated_type()) &&
           verifier.EndTable();
  }
};

template<> inline const DAEquipItem *CTUpdateItem::updated_as<DAEquipItem>() const {
  return updated_as_DAEquipItem();
}

template<> inline const DAMaterialItem *CTUpdateItem::updated_as<DAMaterialItem>() const {
  return updated_as_DAMaterialItem();
}

struct CTUpdateItemBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_charsid(int32_t charsid) {
    fbb_.AddElement<int32_t>(CTUpdateItem::VT_CHARSID, charsid, 0);
  }
  void add_updated_type(UpdatedItem updated_type) {
    fbb_.AddElement<uint8_t>(CTUpdateItem::VT_UPDATED_TYPE, static_cast<uint8_t>(updated_type), 0);
  }
  void add_updated(flatbuffers::Offset<void> updated) {
    fbb_.AddOffset(CTUpdateItem::VT_UPDATED, updated);
  }
  explicit CTUpdateItemBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CTUpdateItemBuilder &operator=(const CTUpdateItemBuilder &);
  flatbuffers::Offset<CTUpdateItem> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CTUpdateItem>(end);
    return o;
  }
};

inline flatbuffers::Offset<CTUpdateItem> CreateCTUpdateItem(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t charsid = 0,
    UpdatedItem updated_type = UpdatedItem_NONE,
    flatbuffers::Offset<void> updated = 0) {
  CTUpdateItemBuilder builder_(_fbb);
  builder_.add_updated(updated);
  builder_.add_charsid(charsid);
  builder_.add_updated_type(updated_type);
  return builder_.Finish();
}

inline bool VerifyUpdatedItem(flatbuffers::Verifier &verifier, const void *obj, UpdatedItem type) {
  switch (type) {
    case UpdatedItem_NONE: {
      return true;
    }
    case UpdatedItem_DAEquipItem: {
      return true;
    }
    case UpdatedItem_DAMaterialItem: {
      return true;
    }
    default: return false;
  }
}

inline bool VerifyUpdatedItemVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyUpdatedItem(
        verifier,  values->Get(i), types->GetEnum<UpdatedItem>(i))) {
      return false;
    }
  }
  return true;
}

inline const Packet::Character::CTUpdateItem *GetCTUpdateItem(const void *buf) {
  return flatbuffers::GetRoot<Packet::Character::CTUpdateItem>(buf);
}

inline const Packet::Character::CTUpdateItem *GetSizePrefixedCTUpdateItem(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Packet::Character::CTUpdateItem>(buf);
}

inline bool VerifyCTUpdateItemBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Packet::Character::CTUpdateItem>(nullptr);
}

inline bool VerifySizePrefixedCTUpdateItemBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Packet::Character::CTUpdateItem>(nullptr);
}

inline void FinishCTUpdateItemBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Character::CTUpdateItem> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCTUpdateItemBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Character::CTUpdateItem> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Character
}  // namespace Packet

#endif  // FLATBUFFERS_GENERATED_CTUPDATEITEM_PACKET_CHARACTER_H_
