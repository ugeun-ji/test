// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CTREGISTER_PACKET_CERTIFY_H_
#define FLATBUFFERS_GENERATED_CTREGISTER_PACKET_CERTIFY_H_

#include "flatbuffers/flatbuffers.h"

#include "daregister_generated.h"

namespace Packet {
namespace Certify {

struct CTChannel;

struct CTRegister;

struct CTChannel FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_NAME = 6
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct CTChannelBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(CTChannel::VT_ID, id, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(CTChannel::VT_NAME, name);
  }
  explicit CTChannelBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CTChannelBuilder &operator=(const CTChannelBuilder &);
  flatbuffers::Offset<CTChannel> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CTChannel>(end);
    return o;
  }
};

inline flatbuffers::Offset<CTChannel> CreateCTChannel(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  CTChannelBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<CTChannel> CreateCTChannelDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    const char *name = nullptr) {
  return Packet::Certify::CreateCTChannel(
      _fbb,
      id,
      name ? _fbb.CreateString(name) : 0);
}

struct CTRegister FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_EXPIRE = 6,
    VT_CHANNELS = 8,
    VT_TYPE = 10
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  uint64_t expire() const {
    return GetField<uint64_t>(VT_EXPIRE, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<CTChannel>> *channels() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<CTChannel>> *>(VT_CHANNELS);
  }
  DSType type() const {
    return static_cast<DSType>(GetField<uint8_t>(VT_TYPE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           VerifyField<uint64_t>(verifier, VT_EXPIRE) &&
           VerifyOffset(verifier, VT_CHANNELS) &&
           verifier.VerifyVector(channels()) &&
           verifier.VerifyVectorOfTables(channels()) &&
           VerifyField<uint8_t>(verifier, VT_TYPE) &&
           verifier.EndTable();
  }
};

struct CTRegisterBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(CTRegister::VT_ID, id, 0);
  }
  void add_expire(uint64_t expire) {
    fbb_.AddElement<uint64_t>(CTRegister::VT_EXPIRE, expire, 0);
  }
  void add_channels(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<CTChannel>>> channels) {
    fbb_.AddOffset(CTRegister::VT_CHANNELS, channels);
  }
  void add_type(DSType type) {
    fbb_.AddElement<uint8_t>(CTRegister::VT_TYPE, static_cast<uint8_t>(type), 0);
  }
  explicit CTRegisterBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CTRegisterBuilder &operator=(const CTRegisterBuilder &);
  flatbuffers::Offset<CTRegister> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CTRegister>(end);
    return o;
  }
};

inline flatbuffers::Offset<CTRegister> CreateCTRegister(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    uint64_t expire = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<CTChannel>>> channels = 0,
    DSType type = DSType_Field) {
  CTRegisterBuilder builder_(_fbb);
  builder_.add_expire(expire);
  builder_.add_channels(channels);
  builder_.add_id(id);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<CTRegister> CreateCTRegisterDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    uint64_t expire = 0,
    const std::vector<flatbuffers::Offset<CTChannel>> *channels = nullptr,
    DSType type = DSType_Field) {
  return Packet::Certify::CreateCTRegister(
      _fbb,
      id,
      expire,
      channels ? _fbb.CreateVector<flatbuffers::Offset<CTChannel>>(*channels) : 0,
      type);
}

inline const Packet::Certify::CTRegister *GetCTRegister(const void *buf) {
  return flatbuffers::GetRoot<Packet::Certify::CTRegister>(buf);
}

inline const Packet::Certify::CTRegister *GetSizePrefixedCTRegister(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Packet::Certify::CTRegister>(buf);
}

inline bool VerifyCTRegisterBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Packet::Certify::CTRegister>(nullptr);
}

inline bool VerifySizePrefixedCTRegisterBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Packet::Certify::CTRegister>(nullptr);
}

inline void FinishCTRegisterBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Certify::CTRegister> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCTRegisterBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Certify::CTRegister> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Certify
}  // namespace Packet

#endif  // FLATBUFFERS_GENERATED_CTREGISTER_PACKET_CERTIFY_H_
