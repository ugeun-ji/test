// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CTALLOCCHANNEL_PACKET_CHANNEL_H_
#define FLATBUFFERS_GENERATED_CTALLOCCHANNEL_PACKET_CHANNEL_H_

#include "flatbuffers/flatbuffers.h"

#include "daserverinfo_generated.h"

namespace Packet {
namespace Channel {

struct CTAllocChannel;

struct CTAllocChannel FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CHID = 4,
    VT_CHARSID = 6,
    VT_SERVER = 8
  };
  int32_t chid() const {
    return GetField<int32_t>(VT_CHID, 0);
  }
  int32_t charsid() const {
    return GetField<int32_t>(VT_CHARSID, 0);
  }
  const DAServerInfo *server() const {
    return GetStruct<const DAServerInfo *>(VT_SERVER);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_CHID) &&
           VerifyField<int32_t>(verifier, VT_CHARSID) &&
           VerifyField<DAServerInfo>(verifier, VT_SERVER) &&
           verifier.EndTable();
  }
};

struct CTAllocChannelBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_chid(int32_t chid) {
    fbb_.AddElement<int32_t>(CTAllocChannel::VT_CHID, chid, 0);
  }
  void add_charsid(int32_t charsid) {
    fbb_.AddElement<int32_t>(CTAllocChannel::VT_CHARSID, charsid, 0);
  }
  void add_server(const DAServerInfo *server) {
    fbb_.AddStruct(CTAllocChannel::VT_SERVER, server);
  }
  explicit CTAllocChannelBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CTAllocChannelBuilder &operator=(const CTAllocChannelBuilder &);
  flatbuffers::Offset<CTAllocChannel> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CTAllocChannel>(end);
    return o;
  }
};

inline flatbuffers::Offset<CTAllocChannel> CreateCTAllocChannel(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t chid = 0,
    int32_t charsid = 0,
    const DAServerInfo *server = 0) {
  CTAllocChannelBuilder builder_(_fbb);
  builder_.add_server(server);
  builder_.add_charsid(charsid);
  builder_.add_chid(chid);
  return builder_.Finish();
}

inline const Packet::Channel::CTAllocChannel *GetCTAllocChannel(const void *buf) {
  return flatbuffers::GetRoot<Packet::Channel::CTAllocChannel>(buf);
}

inline const Packet::Channel::CTAllocChannel *GetSizePrefixedCTAllocChannel(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Packet::Channel::CTAllocChannel>(buf);
}

inline bool VerifyCTAllocChannelBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Packet::Channel::CTAllocChannel>(nullptr);
}

inline bool VerifySizePrefixedCTAllocChannelBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Packet::Channel::CTAllocChannel>(nullptr);
}

inline void FinishCTAllocChannelBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Channel::CTAllocChannel> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCTAllocChannelBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Channel::CTAllocChannel> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Channel
}  // namespace Packet

#endif  // FLATBUFFERS_GENERATED_CTALLOCCHANNEL_PACKET_CHANNEL_H_
