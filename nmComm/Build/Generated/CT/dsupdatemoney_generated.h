// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DSUPDATEMONEY_PACKET_CHARACTER_H_
#define FLATBUFFERS_GENERATED_DSUPDATEMONEY_PACKET_CHARACTER_H_

#include "flatbuffers/flatbuffers.h"

namespace Packet {
namespace Character {

struct DSUpdateMoney;

struct DSUpdateMoney FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CHARSID = 4,
    VT_TYPE = 6,
    VT_MONEY = 8
  };
  int32_t charsid() const {
    return GetField<int32_t>(VT_CHARSID, 0);
  }
  int8_t type() const {
    return GetField<int8_t>(VT_TYPE, 0);
  }
  uint64_t money() const {
    return GetField<uint64_t>(VT_MONEY, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_CHARSID) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyField<uint64_t>(verifier, VT_MONEY) &&
           verifier.EndTable();
  }
};

struct DSUpdateMoneyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_charsid(int32_t charsid) {
    fbb_.AddElement<int32_t>(DSUpdateMoney::VT_CHARSID, charsid, 0);
  }
  void add_type(int8_t type) {
    fbb_.AddElement<int8_t>(DSUpdateMoney::VT_TYPE, type, 0);
  }
  void add_money(uint64_t money) {
    fbb_.AddElement<uint64_t>(DSUpdateMoney::VT_MONEY, money, 0);
  }
  explicit DSUpdateMoneyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DSUpdateMoneyBuilder &operator=(const DSUpdateMoneyBuilder &);
  flatbuffers::Offset<DSUpdateMoney> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DSUpdateMoney>(end);
    return o;
  }
};

inline flatbuffers::Offset<DSUpdateMoney> CreateDSUpdateMoney(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t charsid = 0,
    int8_t type = 0,
    uint64_t money = 0) {
  DSUpdateMoneyBuilder builder_(_fbb);
  builder_.add_money(money);
  builder_.add_charsid(charsid);
  builder_.add_type(type);
  return builder_.Finish();
}

inline const Packet::Character::DSUpdateMoney *GetDSUpdateMoney(const void *buf) {
  return flatbuffers::GetRoot<Packet::Character::DSUpdateMoney>(buf);
}

inline const Packet::Character::DSUpdateMoney *GetSizePrefixedDSUpdateMoney(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Packet::Character::DSUpdateMoney>(buf);
}

inline bool VerifyDSUpdateMoneyBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Packet::Character::DSUpdateMoney>(nullptr);
}

inline bool VerifySizePrefixedDSUpdateMoneyBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Packet::Character::DSUpdateMoney>(nullptr);
}

inline void FinishDSUpdateMoneyBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Character::DSUpdateMoney> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDSUpdateMoneyBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Character::DSUpdateMoney> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Character
}  // namespace Packet

#endif  // FLATBUFFERS_GENERATED_DSUPDATEMONEY_PACKET_CHARACTER_H_
