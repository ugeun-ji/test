// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DSENTERCHARACTER_PACKET_CHARACTER_H_
#define FLATBUFFERS_GENERATED_DSENTERCHARACTER_PACKET_CHARACTER_H_

#include "flatbuffers/flatbuffers.h"

namespace Packet {
namespace Character {

struct DSEnterCharacter;

struct DSEnterCharacter FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CHARSID = 4,
    VT_CHANNEL = 6,
    VT_HASH = 8,
    VT_KEY = 10
  };
  int32_t charsid() const {
    return GetField<int32_t>(VT_CHARSID, 0);
  }
  int32_t channel() const {
    return GetField<int32_t>(VT_CHANNEL, 0);
  }
  uint64_t hash() const {
    return GetField<uint64_t>(VT_HASH, 0);
  }
  const flatbuffers::String *key() const {
    return GetPointer<const flatbuffers::String *>(VT_KEY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_CHARSID) &&
           VerifyField<int32_t>(verifier, VT_CHANNEL) &&
           VerifyField<uint64_t>(verifier, VT_HASH) &&
           VerifyOffset(verifier, VT_KEY) &&
           verifier.VerifyString(key()) &&
           verifier.EndTable();
  }
};

struct DSEnterCharacterBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_charsid(int32_t charsid) {
    fbb_.AddElement<int32_t>(DSEnterCharacter::VT_CHARSID, charsid, 0);
  }
  void add_channel(int32_t channel) {
    fbb_.AddElement<int32_t>(DSEnterCharacter::VT_CHANNEL, channel, 0);
  }
  void add_hash(uint64_t hash) {
    fbb_.AddElement<uint64_t>(DSEnterCharacter::VT_HASH, hash, 0);
  }
  void add_key(flatbuffers::Offset<flatbuffers::String> key) {
    fbb_.AddOffset(DSEnterCharacter::VT_KEY, key);
  }
  explicit DSEnterCharacterBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DSEnterCharacterBuilder &operator=(const DSEnterCharacterBuilder &);
  flatbuffers::Offset<DSEnterCharacter> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DSEnterCharacter>(end);
    return o;
  }
};

inline flatbuffers::Offset<DSEnterCharacter> CreateDSEnterCharacter(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t charsid = 0,
    int32_t channel = 0,
    uint64_t hash = 0,
    flatbuffers::Offset<flatbuffers::String> key = 0) {
  DSEnterCharacterBuilder builder_(_fbb);
  builder_.add_hash(hash);
  builder_.add_key(key);
  builder_.add_channel(channel);
  builder_.add_charsid(charsid);
  return builder_.Finish();
}

inline flatbuffers::Offset<DSEnterCharacter> CreateDSEnterCharacterDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t charsid = 0,
    int32_t channel = 0,
    uint64_t hash = 0,
    const char *key = nullptr) {
  return Packet::Character::CreateDSEnterCharacter(
      _fbb,
      charsid,
      channel,
      hash,
      key ? _fbb.CreateString(key) : 0);
}

inline const Packet::Character::DSEnterCharacter *GetDSEnterCharacter(const void *buf) {
  return flatbuffers::GetRoot<Packet::Character::DSEnterCharacter>(buf);
}

inline const Packet::Character::DSEnterCharacter *GetSizePrefixedDSEnterCharacter(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Packet::Character::DSEnterCharacter>(buf);
}

inline bool VerifyDSEnterCharacterBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Packet::Character::DSEnterCharacter>(nullptr);
}

inline bool VerifySizePrefixedDSEnterCharacterBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Packet::Character::DSEnterCharacter>(nullptr);
}

inline void FinishDSEnterCharacterBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Character::DSEnterCharacter> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDSEnterCharacterBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Character::DSEnterCharacter> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Character
}  // namespace Packet

#endif  // FLATBUFFERS_GENERATED_DSENTERCHARACTER_PACKET_CHARACTER_H_
