// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DAPARTYMEMBER_PACKET_PARTY_H_
#define FLATBUFFERS_GENERATED_DAPARTYMEMBER_PACKET_PARTY_H_

#include "flatbuffers/flatbuffers.h"

namespace Packet {
namespace Party {

struct DAPartyMember;

struct DAPartyMember FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CHARSID = 4,
    VT_NAME = 6,
    VT_CONN = 8
  };
  int32_t charsid() const {
    return GetField<int32_t>(VT_CHARSID, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool conn() const {
    return GetField<uint8_t>(VT_CONN, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_CHARSID) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint8_t>(verifier, VT_CONN) &&
           verifier.EndTable();
  }
};

struct DAPartyMemberBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_charsid(int32_t charsid) {
    fbb_.AddElement<int32_t>(DAPartyMember::VT_CHARSID, charsid, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(DAPartyMember::VT_NAME, name);
  }
  void add_conn(bool conn) {
    fbb_.AddElement<uint8_t>(DAPartyMember::VT_CONN, static_cast<uint8_t>(conn), 0);
  }
  explicit DAPartyMemberBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DAPartyMemberBuilder &operator=(const DAPartyMemberBuilder &);
  flatbuffers::Offset<DAPartyMember> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DAPartyMember>(end);
    return o;
  }
};

inline flatbuffers::Offset<DAPartyMember> CreateDAPartyMember(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t charsid = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    bool conn = false) {
  DAPartyMemberBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_charsid(charsid);
  builder_.add_conn(conn);
  return builder_.Finish();
}

inline flatbuffers::Offset<DAPartyMember> CreateDAPartyMemberDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t charsid = 0,
    const char *name = nullptr,
    bool conn = false) {
  return Packet::Party::CreateDAPartyMember(
      _fbb,
      charsid,
      name ? _fbb.CreateString(name) : 0,
      conn);
}

}  // namespace Party
}  // namespace Packet

#endif  // FLATBUFFERS_GENERATED_DAPARTYMEMBER_PACKET_PARTY_H_
