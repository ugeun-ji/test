// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DSEQUIPUNEQUIP_PACKET_CHARACTER_H_
#define FLATBUFFERS_GENERATED_DSEQUIPUNEQUIP_PACKET_CHARACTER_H_

#include "flatbuffers/flatbuffers.h"

namespace Packet {
namespace Character {

struct DSEquipUnequip;

struct DSEquipUnequip FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CHARSID = 4,
    VT_ITEMSID = 6,
    VT_SLOT = 8,
    VT_MODE = 10
  };
  int32_t charsid() const {
    return GetField<int32_t>(VT_CHARSID, 0);
  }
  int64_t itemsid() const {
    return GetField<int64_t>(VT_ITEMSID, 0);
  }
  int8_t slot() const {
    return GetField<int8_t>(VT_SLOT, 0);
  }
  int8_t mode() const {
    return GetField<int8_t>(VT_MODE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_CHARSID) &&
           VerifyField<int64_t>(verifier, VT_ITEMSID) &&
           VerifyField<int8_t>(verifier, VT_SLOT) &&
           VerifyField<int8_t>(verifier, VT_MODE) &&
           verifier.EndTable();
  }
};

struct DSEquipUnequipBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_charsid(int32_t charsid) {
    fbb_.AddElement<int32_t>(DSEquipUnequip::VT_CHARSID, charsid, 0);
  }
  void add_itemsid(int64_t itemsid) {
    fbb_.AddElement<int64_t>(DSEquipUnequip::VT_ITEMSID, itemsid, 0);
  }
  void add_slot(int8_t slot) {
    fbb_.AddElement<int8_t>(DSEquipUnequip::VT_SLOT, slot, 0);
  }
  void add_mode(int8_t mode) {
    fbb_.AddElement<int8_t>(DSEquipUnequip::VT_MODE, mode, 0);
  }
  explicit DSEquipUnequipBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DSEquipUnequipBuilder &operator=(const DSEquipUnequipBuilder &);
  flatbuffers::Offset<DSEquipUnequip> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DSEquipUnequip>(end);
    return o;
  }
};

inline flatbuffers::Offset<DSEquipUnequip> CreateDSEquipUnequip(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t charsid = 0,
    int64_t itemsid = 0,
    int8_t slot = 0,
    int8_t mode = 0) {
  DSEquipUnequipBuilder builder_(_fbb);
  builder_.add_itemsid(itemsid);
  builder_.add_charsid(charsid);
  builder_.add_mode(mode);
  builder_.add_slot(slot);
  return builder_.Finish();
}

inline const Packet::Character::DSEquipUnequip *GetDSEquipUnequip(const void *buf) {
  return flatbuffers::GetRoot<Packet::Character::DSEquipUnequip>(buf);
}

inline const Packet::Character::DSEquipUnequip *GetSizePrefixedDSEquipUnequip(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Packet::Character::DSEquipUnequip>(buf);
}

inline bool VerifyDSEquipUnequipBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Packet::Character::DSEquipUnequip>(nullptr);
}

inline bool VerifySizePrefixedDSEquipUnequipBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Packet::Character::DSEquipUnequip>(nullptr);
}

inline void FinishDSEquipUnequipBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Character::DSEquipUnequip> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDSEquipUnequipBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Character::DSEquipUnequip> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Character
}  // namespace Packet

#endif  // FLATBUFFERS_GENERATED_DSEQUIPUNEQUIP_PACKET_CHARACTER_H_
