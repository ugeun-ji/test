// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DAQUEST_PACKET_CHARACTER_H_
#define FLATBUFFERS_GENERATED_DAQUEST_PACKET_CHARACTER_H_

#include "flatbuffers/flatbuffers.h"

#include "daquestobjective_generated.h"

namespace Packet {
namespace Character {

struct DAQuest;

enum QuestStatus {
  QuestStatus_Progress = 0,
  QuestStatus_Complete = 1,
  QuestStatus_MIN = QuestStatus_Progress,
  QuestStatus_MAX = QuestStatus_Complete
};

inline const QuestStatus (&EnumValuesQuestStatus())[2] {
  static const QuestStatus values[] = {
    QuestStatus_Progress,
    QuestStatus_Complete
  };
  return values;
}

inline const char * const *EnumNamesQuestStatus() {
  static const char * const names[] = {
    "Progress",
    "Complete",
    nullptr
  };
  return names;
}

inline const char *EnumNameQuestStatus(QuestStatus e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesQuestStatus()[index];
}

enum QuestType {
  QuestType_None = 0,
  QuestType_Scenario = 1,
  QuestType_Mission = 2,
  QuestType_MIN = QuestType_None,
  QuestType_MAX = QuestType_Mission
};

inline const QuestType (&EnumValuesQuestType())[3] {
  static const QuestType values[] = {
    QuestType_None,
    QuestType_Scenario,
    QuestType_Mission
  };
  return values;
}

inline const char * const *EnumNamesQuestType() {
  static const char * const names[] = {
    "None",
    "Scenario",
    "Mission",
    nullptr
  };
  return names;
}

inline const char *EnumNameQuestType(QuestType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesQuestType()[index];
}

struct DAQuest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_QUESTSID = 4,
    VT_QUESTID = 6,
    VT_OBJECTIVES = 8,
    VT_TYPE = 10,
    VT_STATUS = 12
  };
  int64_t questsid() const {
    return GetField<int64_t>(VT_QUESTSID, 0);
  }
  int32_t questid() const {
    return GetField<int32_t>(VT_QUESTID, 0);
  }
  const flatbuffers::Vector<const DAQuestObjective *> *objectives() const {
    return GetPointer<const flatbuffers::Vector<const DAQuestObjective *> *>(VT_OBJECTIVES);
  }
  QuestType type() const {
    return static_cast<QuestType>(GetField<int8_t>(VT_TYPE, 0));
  }
  QuestStatus status() const {
    return static_cast<QuestStatus>(GetField<int8_t>(VT_STATUS, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_QUESTSID) &&
           VerifyField<int32_t>(verifier, VT_QUESTID) &&
           VerifyOffset(verifier, VT_OBJECTIVES) &&
           verifier.VerifyVector(objectives()) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyField<int8_t>(verifier, VT_STATUS) &&
           verifier.EndTable();
  }
};

struct DAQuestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_questsid(int64_t questsid) {
    fbb_.AddElement<int64_t>(DAQuest::VT_QUESTSID, questsid, 0);
  }
  void add_questid(int32_t questid) {
    fbb_.AddElement<int32_t>(DAQuest::VT_QUESTID, questid, 0);
  }
  void add_objectives(flatbuffers::Offset<flatbuffers::Vector<const DAQuestObjective *>> objectives) {
    fbb_.AddOffset(DAQuest::VT_OBJECTIVES, objectives);
  }
  void add_type(QuestType type) {
    fbb_.AddElement<int8_t>(DAQuest::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_status(QuestStatus status) {
    fbb_.AddElement<int8_t>(DAQuest::VT_STATUS, static_cast<int8_t>(status), 0);
  }
  explicit DAQuestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DAQuestBuilder &operator=(const DAQuestBuilder &);
  flatbuffers::Offset<DAQuest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DAQuest>(end);
    return o;
  }
};

inline flatbuffers::Offset<DAQuest> CreateDAQuest(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t questsid = 0,
    int32_t questid = 0,
    flatbuffers::Offset<flatbuffers::Vector<const DAQuestObjective *>> objectives = 0,
    QuestType type = QuestType_None,
    QuestStatus status = QuestStatus_Progress) {
  DAQuestBuilder builder_(_fbb);
  builder_.add_questsid(questsid);
  builder_.add_objectives(objectives);
  builder_.add_questid(questid);
  builder_.add_status(status);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<DAQuest> CreateDAQuestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t questsid = 0,
    int32_t questid = 0,
    const std::vector<DAQuestObjective> *objectives = nullptr,
    QuestType type = QuestType_None,
    QuestStatus status = QuestStatus_Progress) {
  return Packet::Character::CreateDAQuest(
      _fbb,
      questsid,
      questid,
      objectives ? _fbb.CreateVectorOfStructs<DAQuestObjective>(*objectives) : 0,
      type,
      status);
}

}  // namespace Character
}  // namespace Packet

#endif  // FLATBUFFERS_GENERATED_DAQUEST_PACKET_CHARACTER_H_
