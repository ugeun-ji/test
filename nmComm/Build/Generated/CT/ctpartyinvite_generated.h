// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CTPARTYINVITE_PACKET_PARTY_H_
#define FLATBUFFERS_GENERATED_CTPARTYINVITE_PACKET_PARTY_H_

#include "flatbuffers/flatbuffers.h"

namespace Packet {
namespace Party {

struct CTPartyInvite;

struct CTPartyInvite FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CHID = 4,
    VT_CHARSID = 6,
    VT_INVITER = 8,
    VT_INVITATIONSID = 10
  };
  int32_t chid() const {
    return GetField<int32_t>(VT_CHID, 0);
  }
  int32_t charsid() const {
    return GetField<int32_t>(VT_CHARSID, 0);
  }
  const flatbuffers::String *inviter() const {
    return GetPointer<const flatbuffers::String *>(VT_INVITER);
  }
  int32_t invitationsid() const {
    return GetField<int32_t>(VT_INVITATIONSID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_CHID) &&
           VerifyField<int32_t>(verifier, VT_CHARSID) &&
           VerifyOffset(verifier, VT_INVITER) &&
           verifier.VerifyString(inviter()) &&
           VerifyField<int32_t>(verifier, VT_INVITATIONSID) &&
           verifier.EndTable();
  }
};

struct CTPartyInviteBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_chid(int32_t chid) {
    fbb_.AddElement<int32_t>(CTPartyInvite::VT_CHID, chid, 0);
  }
  void add_charsid(int32_t charsid) {
    fbb_.AddElement<int32_t>(CTPartyInvite::VT_CHARSID, charsid, 0);
  }
  void add_inviter(flatbuffers::Offset<flatbuffers::String> inviter) {
    fbb_.AddOffset(CTPartyInvite::VT_INVITER, inviter);
  }
  void add_invitationsid(int32_t invitationsid) {
    fbb_.AddElement<int32_t>(CTPartyInvite::VT_INVITATIONSID, invitationsid, 0);
  }
  explicit CTPartyInviteBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CTPartyInviteBuilder &operator=(const CTPartyInviteBuilder &);
  flatbuffers::Offset<CTPartyInvite> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CTPartyInvite>(end);
    return o;
  }
};

inline flatbuffers::Offset<CTPartyInvite> CreateCTPartyInvite(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t chid = 0,
    int32_t charsid = 0,
    flatbuffers::Offset<flatbuffers::String> inviter = 0,
    int32_t invitationsid = 0) {
  CTPartyInviteBuilder builder_(_fbb);
  builder_.add_invitationsid(invitationsid);
  builder_.add_inviter(inviter);
  builder_.add_charsid(charsid);
  builder_.add_chid(chid);
  return builder_.Finish();
}

inline flatbuffers::Offset<CTPartyInvite> CreateCTPartyInviteDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t chid = 0,
    int32_t charsid = 0,
    const char *inviter = nullptr,
    int32_t invitationsid = 0) {
  return Packet::Party::CreateCTPartyInvite(
      _fbb,
      chid,
      charsid,
      inviter ? _fbb.CreateString(inviter) : 0,
      invitationsid);
}

inline const Packet::Party::CTPartyInvite *GetCTPartyInvite(const void *buf) {
  return flatbuffers::GetRoot<Packet::Party::CTPartyInvite>(buf);
}

inline const Packet::Party::CTPartyInvite *GetSizePrefixedCTPartyInvite(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Packet::Party::CTPartyInvite>(buf);
}

inline bool VerifyCTPartyInviteBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Packet::Party::CTPartyInvite>(nullptr);
}

inline bool VerifySizePrefixedCTPartyInviteBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Packet::Party::CTPartyInvite>(nullptr);
}

inline void FinishCTPartyInviteBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Party::CTPartyInvite> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCTPartyInviteBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Party::CTPartyInvite> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Party
}  // namespace Packet

#endif  // FLATBUFFERS_GENERATED_CTPARTYINVITE_PACKET_PARTY_H_
