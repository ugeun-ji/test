// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DSPARTYINVITE_PACKET_PARTY_H_
#define FLATBUFFERS_GENERATED_DSPARTYINVITE_PACKET_PARTY_H_

#include "flatbuffers/flatbuffers.h"

namespace Packet {
namespace Party {

struct DSPartyInvite;

struct DSPartyInvite FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CHARSID = 4,
    VT_INVITEE = 6
  };
  int32_t charsid() const {
    return GetField<int32_t>(VT_CHARSID, 0);
  }
  const flatbuffers::String *invitee() const {
    return GetPointer<const flatbuffers::String *>(VT_INVITEE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_CHARSID) &&
           VerifyOffset(verifier, VT_INVITEE) &&
           verifier.VerifyString(invitee()) &&
           verifier.EndTable();
  }
};

struct DSPartyInviteBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_charsid(int32_t charsid) {
    fbb_.AddElement<int32_t>(DSPartyInvite::VT_CHARSID, charsid, 0);
  }
  void add_invitee(flatbuffers::Offset<flatbuffers::String> invitee) {
    fbb_.AddOffset(DSPartyInvite::VT_INVITEE, invitee);
  }
  explicit DSPartyInviteBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DSPartyInviteBuilder &operator=(const DSPartyInviteBuilder &);
  flatbuffers::Offset<DSPartyInvite> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DSPartyInvite>(end);
    return o;
  }
};

inline flatbuffers::Offset<DSPartyInvite> CreateDSPartyInvite(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t charsid = 0,
    flatbuffers::Offset<flatbuffers::String> invitee = 0) {
  DSPartyInviteBuilder builder_(_fbb);
  builder_.add_invitee(invitee);
  builder_.add_charsid(charsid);
  return builder_.Finish();
}

inline flatbuffers::Offset<DSPartyInvite> CreateDSPartyInviteDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t charsid = 0,
    const char *invitee = nullptr) {
  return Packet::Party::CreateDSPartyInvite(
      _fbb,
      charsid,
      invitee ? _fbb.CreateString(invitee) : 0);
}

inline const Packet::Party::DSPartyInvite *GetDSPartyInvite(const void *buf) {
  return flatbuffers::GetRoot<Packet::Party::DSPartyInvite>(buf);
}

inline const Packet::Party::DSPartyInvite *GetSizePrefixedDSPartyInvite(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Packet::Party::DSPartyInvite>(buf);
}

inline bool VerifyDSPartyInviteBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Packet::Party::DSPartyInvite>(nullptr);
}

inline bool VerifySizePrefixedDSPartyInviteBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Packet::Party::DSPartyInvite>(nullptr);
}

inline void FinishDSPartyInviteBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Party::DSPartyInvite> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDSPartyInviteBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Party::DSPartyInvite> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Party
}  // namespace Packet

#endif  // FLATBUFFERS_GENERATED_DSPARTYINVITE_PACKET_PARTY_H_
