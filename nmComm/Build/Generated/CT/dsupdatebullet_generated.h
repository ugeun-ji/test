// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DSUPDATEBULLET_PACKET_CHARACTER_H_
#define FLATBUFFERS_GENERATED_DSUPDATEBULLET_PACKET_CHARACTER_H_

#include "flatbuffers/flatbuffers.h"

namespace Packet {
namespace Character {

struct DSUpdateBullet;

struct DSUpdateBullet FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CHARSID = 4,
    VT_WEAPONSID = 6,
    VT_AMMOID = 8,
    VT_BULLET = 10,
    VT_AMMO = 12
  };
  int32_t charsid() const {
    return GetField<int32_t>(VT_CHARSID, 0);
  }
  int64_t weaponsid() const {
    return GetField<int64_t>(VT_WEAPONSID, 0);
  }
  int32_t ammoid() const {
    return GetField<int32_t>(VT_AMMOID, 0);
  }
  int16_t bullet() const {
    return GetField<int16_t>(VT_BULLET, 0);
  }
  int16_t ammo() const {
    return GetField<int16_t>(VT_AMMO, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_CHARSID) &&
           VerifyField<int64_t>(verifier, VT_WEAPONSID) &&
           VerifyField<int32_t>(verifier, VT_AMMOID) &&
           VerifyField<int16_t>(verifier, VT_BULLET) &&
           VerifyField<int16_t>(verifier, VT_AMMO) &&
           verifier.EndTable();
  }
};

struct DSUpdateBulletBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_charsid(int32_t charsid) {
    fbb_.AddElement<int32_t>(DSUpdateBullet::VT_CHARSID, charsid, 0);
  }
  void add_weaponsid(int64_t weaponsid) {
    fbb_.AddElement<int64_t>(DSUpdateBullet::VT_WEAPONSID, weaponsid, 0);
  }
  void add_ammoid(int32_t ammoid) {
    fbb_.AddElement<int32_t>(DSUpdateBullet::VT_AMMOID, ammoid, 0);
  }
  void add_bullet(int16_t bullet) {
    fbb_.AddElement<int16_t>(DSUpdateBullet::VT_BULLET, bullet, 0);
  }
  void add_ammo(int16_t ammo) {
    fbb_.AddElement<int16_t>(DSUpdateBullet::VT_AMMO, ammo, 0);
  }
  explicit DSUpdateBulletBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DSUpdateBulletBuilder &operator=(const DSUpdateBulletBuilder &);
  flatbuffers::Offset<DSUpdateBullet> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DSUpdateBullet>(end);
    return o;
  }
};

inline flatbuffers::Offset<DSUpdateBullet> CreateDSUpdateBullet(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t charsid = 0,
    int64_t weaponsid = 0,
    int32_t ammoid = 0,
    int16_t bullet = 0,
    int16_t ammo = 0) {
  DSUpdateBulletBuilder builder_(_fbb);
  builder_.add_weaponsid(weaponsid);
  builder_.add_ammoid(ammoid);
  builder_.add_charsid(charsid);
  builder_.add_ammo(ammo);
  builder_.add_bullet(bullet);
  return builder_.Finish();
}

inline const Packet::Character::DSUpdateBullet *GetDSUpdateBullet(const void *buf) {
  return flatbuffers::GetRoot<Packet::Character::DSUpdateBullet>(buf);
}

inline const Packet::Character::DSUpdateBullet *GetSizePrefixedDSUpdateBullet(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Packet::Character::DSUpdateBullet>(buf);
}

inline bool VerifyDSUpdateBulletBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Packet::Character::DSUpdateBullet>(nullptr);
}

inline bool VerifySizePrefixedDSUpdateBulletBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Packet::Character::DSUpdateBullet>(nullptr);
}

inline void FinishDSUpdateBulletBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Character::DSUpdateBullet> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDSUpdateBulletBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Character::DSUpdateBullet> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Character
}  // namespace Packet

#endif  // FLATBUFFERS_GENERATED_DSUPDATEBULLET_PACKET_CHARACTER_H_
