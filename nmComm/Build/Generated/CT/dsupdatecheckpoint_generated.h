// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DSUPDATECHECKPOINT_PACKET_CHARACTER_H_
#define FLATBUFFERS_GENERATED_DSUPDATECHECKPOINT_PACKET_CHARACTER_H_

#include "flatbuffers/flatbuffers.h"

namespace Packet {
namespace Character {

struct DSUpdateCheckpoint;

struct DSUpdateCheckpoint FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CHARSID = 4,
    VT_CHECKPOINT = 6
  };
  int32_t charsid() const {
    return GetField<int32_t>(VT_CHARSID, 0);
  }
  int32_t checkpoint() const {
    return GetField<int32_t>(VT_CHECKPOINT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_CHARSID) &&
           VerifyField<int32_t>(verifier, VT_CHECKPOINT) &&
           verifier.EndTable();
  }
};

struct DSUpdateCheckpointBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_charsid(int32_t charsid) {
    fbb_.AddElement<int32_t>(DSUpdateCheckpoint::VT_CHARSID, charsid, 0);
  }
  void add_checkpoint(int32_t checkpoint) {
    fbb_.AddElement<int32_t>(DSUpdateCheckpoint::VT_CHECKPOINT, checkpoint, 0);
  }
  explicit DSUpdateCheckpointBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DSUpdateCheckpointBuilder &operator=(const DSUpdateCheckpointBuilder &);
  flatbuffers::Offset<DSUpdateCheckpoint> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DSUpdateCheckpoint>(end);
    return o;
  }
};

inline flatbuffers::Offset<DSUpdateCheckpoint> CreateDSUpdateCheckpoint(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t charsid = 0,
    int32_t checkpoint = 0) {
  DSUpdateCheckpointBuilder builder_(_fbb);
  builder_.add_checkpoint(checkpoint);
  builder_.add_charsid(charsid);
  return builder_.Finish();
}

inline const Packet::Character::DSUpdateCheckpoint *GetDSUpdateCheckpoint(const void *buf) {
  return flatbuffers::GetRoot<Packet::Character::DSUpdateCheckpoint>(buf);
}

inline const Packet::Character::DSUpdateCheckpoint *GetSizePrefixedDSUpdateCheckpoint(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Packet::Character::DSUpdateCheckpoint>(buf);
}

inline bool VerifyDSUpdateCheckpointBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Packet::Character::DSUpdateCheckpoint>(nullptr);
}

inline bool VerifySizePrefixedDSUpdateCheckpointBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Packet::Character::DSUpdateCheckpoint>(nullptr);
}

inline void FinishDSUpdateCheckpointBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Character::DSUpdateCheckpoint> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDSUpdateCheckpointBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Character::DSUpdateCheckpoint> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Character
}  // namespace Packet

#endif  // FLATBUFFERS_GENERATED_DSUPDATECHECKPOINT_PACKET_CHARACTER_H_
