// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CTPVPMATCHINGSUCCESS_PACKET_MATCH_PVP_H_
#define FLATBUFFERS_GENERATED_CTPVPMATCHINGSUCCESS_PACKET_MATCH_PVP_H_

#include "flatbuffers/flatbuffers.h"

namespace Packet {
namespace Match {
namespace PvP {

struct CTPvPMatchingSuccess;

struct CTPvPMatchingSuccess FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CHANNEL = 4,
    VT_CHARSID = 6,
    VT_TEAM = 8,
    VT_DSID = 10,
    VT_CHID = 12,
    VT_HASH = 14
  };
  int32_t channel() const {
    return GetField<int32_t>(VT_CHANNEL, 0);
  }
  int32_t charsid() const {
    return GetField<int32_t>(VT_CHARSID, 0);
  }
  int32_t team() const {
    return GetField<int32_t>(VT_TEAM, 0);
  }
  int32_t dsid() const {
    return GetField<int32_t>(VT_DSID, 0);
  }
  int32_t chid() const {
    return GetField<int32_t>(VT_CHID, 0);
  }
  uint64_t hash() const {
    return GetField<uint64_t>(VT_HASH, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_CHANNEL) &&
           VerifyField<int32_t>(verifier, VT_CHARSID) &&
           VerifyField<int32_t>(verifier, VT_TEAM) &&
           VerifyField<int32_t>(verifier, VT_DSID) &&
           VerifyField<int32_t>(verifier, VT_CHID) &&
           VerifyField<uint64_t>(verifier, VT_HASH) &&
           verifier.EndTable();
  }
};

struct CTPvPMatchingSuccessBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_channel(int32_t channel) {
    fbb_.AddElement<int32_t>(CTPvPMatchingSuccess::VT_CHANNEL, channel, 0);
  }
  void add_charsid(int32_t charsid) {
    fbb_.AddElement<int32_t>(CTPvPMatchingSuccess::VT_CHARSID, charsid, 0);
  }
  void add_team(int32_t team) {
    fbb_.AddElement<int32_t>(CTPvPMatchingSuccess::VT_TEAM, team, 0);
  }
  void add_dsid(int32_t dsid) {
    fbb_.AddElement<int32_t>(CTPvPMatchingSuccess::VT_DSID, dsid, 0);
  }
  void add_chid(int32_t chid) {
    fbb_.AddElement<int32_t>(CTPvPMatchingSuccess::VT_CHID, chid, 0);
  }
  void add_hash(uint64_t hash) {
    fbb_.AddElement<uint64_t>(CTPvPMatchingSuccess::VT_HASH, hash, 0);
  }
  explicit CTPvPMatchingSuccessBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CTPvPMatchingSuccessBuilder &operator=(const CTPvPMatchingSuccessBuilder &);
  flatbuffers::Offset<CTPvPMatchingSuccess> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CTPvPMatchingSuccess>(end);
    return o;
  }
};

inline flatbuffers::Offset<CTPvPMatchingSuccess> CreateCTPvPMatchingSuccess(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t channel = 0,
    int32_t charsid = 0,
    int32_t team = 0,
    int32_t dsid = 0,
    int32_t chid = 0,
    uint64_t hash = 0) {
  CTPvPMatchingSuccessBuilder builder_(_fbb);
  builder_.add_hash(hash);
  builder_.add_chid(chid);
  builder_.add_dsid(dsid);
  builder_.add_team(team);
  builder_.add_charsid(charsid);
  builder_.add_channel(channel);
  return builder_.Finish();
}

inline const Packet::Match::PvP::CTPvPMatchingSuccess *GetCTPvPMatchingSuccess(const void *buf) {
  return flatbuffers::GetRoot<Packet::Match::PvP::CTPvPMatchingSuccess>(buf);
}

inline const Packet::Match::PvP::CTPvPMatchingSuccess *GetSizePrefixedCTPvPMatchingSuccess(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Packet::Match::PvP::CTPvPMatchingSuccess>(buf);
}

inline bool VerifyCTPvPMatchingSuccessBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Packet::Match::PvP::CTPvPMatchingSuccess>(nullptr);
}

inline bool VerifySizePrefixedCTPvPMatchingSuccessBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Packet::Match::PvP::CTPvPMatchingSuccess>(nullptr);
}

inline void FinishCTPvPMatchingSuccessBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Match::PvP::CTPvPMatchingSuccess> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCTPvPMatchingSuccessBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Match::PvP::CTPvPMatchingSuccess> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace PvP
}  // namespace Match
}  // namespace Packet

#endif  // FLATBUFFERS_GENERATED_CTPVPMATCHINGSUCCESS_PACKET_MATCH_PVP_H_
