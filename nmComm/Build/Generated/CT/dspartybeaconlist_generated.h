// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DSPARTYBEACONLIST_PACKET_PARTY_H_
#define FLATBUFFERS_GENERATED_DSPARTYBEACONLIST_PACKET_PARTY_H_

#include "flatbuffers/flatbuffers.h"

namespace Packet {
namespace Party {

struct DSPartyBeaconList;

struct DSPartyBeaconList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CHARSID = 4
  };
  int32_t charsid() const {
    return GetField<int32_t>(VT_CHARSID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_CHARSID) &&
           verifier.EndTable();
  }
};

struct DSPartyBeaconListBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_charsid(int32_t charsid) {
    fbb_.AddElement<int32_t>(DSPartyBeaconList::VT_CHARSID, charsid, 0);
  }
  explicit DSPartyBeaconListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DSPartyBeaconListBuilder &operator=(const DSPartyBeaconListBuilder &);
  flatbuffers::Offset<DSPartyBeaconList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DSPartyBeaconList>(end);
    return o;
  }
};

inline flatbuffers::Offset<DSPartyBeaconList> CreateDSPartyBeaconList(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t charsid = 0) {
  DSPartyBeaconListBuilder builder_(_fbb);
  builder_.add_charsid(charsid);
  return builder_.Finish();
}

inline const Packet::Party::DSPartyBeaconList *GetDSPartyBeaconList(const void *buf) {
  return flatbuffers::GetRoot<Packet::Party::DSPartyBeaconList>(buf);
}

inline const Packet::Party::DSPartyBeaconList *GetSizePrefixedDSPartyBeaconList(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Packet::Party::DSPartyBeaconList>(buf);
}

inline bool VerifyDSPartyBeaconListBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Packet::Party::DSPartyBeaconList>(nullptr);
}

inline bool VerifySizePrefixedDSPartyBeaconListBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Packet::Party::DSPartyBeaconList>(nullptr);
}

inline void FinishDSPartyBeaconListBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Party::DSPartyBeaconList> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDSPartyBeaconListBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Party::DSPartyBeaconList> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Party
}  // namespace Packet

#endif  // FLATBUFFERS_GENERATED_DSPARTYBEACONLIST_PACKET_PARTY_H_
