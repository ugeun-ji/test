// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CTPARTYQUESTINFO_PACKET_CHARACTER_H_
#define FLATBUFFERS_GENERATED_CTPARTYQUESTINFO_PACKET_CHARACTER_H_

#include "flatbuffers/flatbuffers.h"

#include "daquest_generated.h"
#include "daquestobjective_generated.h"

namespace Packet {
namespace Character {

struct CTPartyQuestInfo;

struct CTPartyQuestInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CHID = 4,
    VT_PARTYID = 6,
    VT_QUEST = 8
  };
  int32_t chid() const {
    return GetField<int32_t>(VT_CHID, 0);
  }
  int32_t partyid() const {
    return GetField<int32_t>(VT_PARTYID, 0);
  }
  const DAQuest *quest() const {
    return GetPointer<const DAQuest *>(VT_QUEST);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_CHID) &&
           VerifyField<int32_t>(verifier, VT_PARTYID) &&
           VerifyOffset(verifier, VT_QUEST) &&
           verifier.VerifyTable(quest()) &&
           verifier.EndTable();
  }
};

struct CTPartyQuestInfoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_chid(int32_t chid) {
    fbb_.AddElement<int32_t>(CTPartyQuestInfo::VT_CHID, chid, 0);
  }
  void add_partyid(int32_t partyid) {
    fbb_.AddElement<int32_t>(CTPartyQuestInfo::VT_PARTYID, partyid, 0);
  }
  void add_quest(flatbuffers::Offset<DAQuest> quest) {
    fbb_.AddOffset(CTPartyQuestInfo::VT_QUEST, quest);
  }
  explicit CTPartyQuestInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CTPartyQuestInfoBuilder &operator=(const CTPartyQuestInfoBuilder &);
  flatbuffers::Offset<CTPartyQuestInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CTPartyQuestInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<CTPartyQuestInfo> CreateCTPartyQuestInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t chid = 0,
    int32_t partyid = 0,
    flatbuffers::Offset<DAQuest> quest = 0) {
  CTPartyQuestInfoBuilder builder_(_fbb);
  builder_.add_quest(quest);
  builder_.add_partyid(partyid);
  builder_.add_chid(chid);
  return builder_.Finish();
}

inline const Packet::Character::CTPartyQuestInfo *GetCTPartyQuestInfo(const void *buf) {
  return flatbuffers::GetRoot<Packet::Character::CTPartyQuestInfo>(buf);
}

inline const Packet::Character::CTPartyQuestInfo *GetSizePrefixedCTPartyQuestInfo(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Packet::Character::CTPartyQuestInfo>(buf);
}

inline bool VerifyCTPartyQuestInfoBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Packet::Character::CTPartyQuestInfo>(nullptr);
}

inline bool VerifySizePrefixedCTPartyQuestInfoBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Packet::Character::CTPartyQuestInfo>(nullptr);
}

inline void FinishCTPartyQuestInfoBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Character::CTPartyQuestInfo> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCTPartyQuestInfoBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Character::CTPartyQuestInfo> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Character
}  // namespace Packet

#endif  // FLATBUFFERS_GENERATED_CTPARTYQUESTINFO_PACKET_CHARACTER_H_
