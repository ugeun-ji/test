// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DSLEAVECHARACTER_PACKET_CHARACTER_H_
#define FLATBUFFERS_GENERATED_DSLEAVECHARACTER_PACKET_CHARACTER_H_

#include "flatbuffers/flatbuffers.h"

namespace Packet {
namespace Character {

struct DSLeaveCharacter;

enum DALeaveType {
  DALeaveType_Close = 0,
  DALeaveType_Unusual = 1,
  DALeaveType_Move = 2,
  DALeaveType_MIN = DALeaveType_Close,
  DALeaveType_MAX = DALeaveType_Move
};

inline const DALeaveType (&EnumValuesDALeaveType())[3] {
  static const DALeaveType values[] = {
    DALeaveType_Close,
    DALeaveType_Unusual,
    DALeaveType_Move
  };
  return values;
}

inline const char * const *EnumNamesDALeaveType() {
  static const char * const names[] = {
    "Close",
    "Unusual",
    "Move",
    nullptr
  };
  return names;
}

inline const char *EnumNameDALeaveType(DALeaveType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesDALeaveType()[index];
}

struct DSLeaveCharacter FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SID = 4,
    VT_LEAVETYPE = 6
  };
  int32_t sid() const {
    return GetField<int32_t>(VT_SID, 0);
  }
  DALeaveType leavetype() const {
    return static_cast<DALeaveType>(GetField<uint8_t>(VT_LEAVETYPE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_SID) &&
           VerifyField<uint8_t>(verifier, VT_LEAVETYPE) &&
           verifier.EndTable();
  }
};

struct DSLeaveCharacterBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sid(int32_t sid) {
    fbb_.AddElement<int32_t>(DSLeaveCharacter::VT_SID, sid, 0);
  }
  void add_leavetype(DALeaveType leavetype) {
    fbb_.AddElement<uint8_t>(DSLeaveCharacter::VT_LEAVETYPE, static_cast<uint8_t>(leavetype), 0);
  }
  explicit DSLeaveCharacterBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DSLeaveCharacterBuilder &operator=(const DSLeaveCharacterBuilder &);
  flatbuffers::Offset<DSLeaveCharacter> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DSLeaveCharacter>(end);
    return o;
  }
};

inline flatbuffers::Offset<DSLeaveCharacter> CreateDSLeaveCharacter(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t sid = 0,
    DALeaveType leavetype = DALeaveType_Close) {
  DSLeaveCharacterBuilder builder_(_fbb);
  builder_.add_sid(sid);
  builder_.add_leavetype(leavetype);
  return builder_.Finish();
}

inline const Packet::Character::DSLeaveCharacter *GetDSLeaveCharacter(const void *buf) {
  return flatbuffers::GetRoot<Packet::Character::DSLeaveCharacter>(buf);
}

inline const Packet::Character::DSLeaveCharacter *GetSizePrefixedDSLeaveCharacter(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Packet::Character::DSLeaveCharacter>(buf);
}

inline bool VerifyDSLeaveCharacterBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Packet::Character::DSLeaveCharacter>(nullptr);
}

inline bool VerifySizePrefixedDSLeaveCharacterBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Packet::Character::DSLeaveCharacter>(nullptr);
}

inline void FinishDSLeaveCharacterBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Character::DSLeaveCharacter> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDSLeaveCharacterBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Character::DSLeaveCharacter> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Character
}  // namespace Packet

#endif  // FLATBUFFERS_GENERATED_DSLEAVECHARACTER_PACKET_CHARACTER_H_
