// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CTPARTYDISMISS_PACKET_PARTY_H_
#define FLATBUFFERS_GENERATED_CTPARTYDISMISS_PACKET_PARTY_H_

#include "flatbuffers/flatbuffers.h"

namespace Packet {
namespace Party {

struct CTPartyDismiss;

struct CTPartyDismiss FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CHID = 4,
    VT_PARTYID = 6
  };
  int32_t chid() const {
    return GetField<int32_t>(VT_CHID, 0);
  }
  int32_t partyid() const {
    return GetField<int32_t>(VT_PARTYID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_CHID) &&
           VerifyField<int32_t>(verifier, VT_PARTYID) &&
           verifier.EndTable();
  }
};

struct CTPartyDismissBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_chid(int32_t chid) {
    fbb_.AddElement<int32_t>(CTPartyDismiss::VT_CHID, chid, 0);
  }
  void add_partyid(int32_t partyid) {
    fbb_.AddElement<int32_t>(CTPartyDismiss::VT_PARTYID, partyid, 0);
  }
  explicit CTPartyDismissBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CTPartyDismissBuilder &operator=(const CTPartyDismissBuilder &);
  flatbuffers::Offset<CTPartyDismiss> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CTPartyDismiss>(end);
    return o;
  }
};

inline flatbuffers::Offset<CTPartyDismiss> CreateCTPartyDismiss(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t chid = 0,
    int32_t partyid = 0) {
  CTPartyDismissBuilder builder_(_fbb);
  builder_.add_partyid(partyid);
  builder_.add_chid(chid);
  return builder_.Finish();
}

inline const Packet::Party::CTPartyDismiss *GetCTPartyDismiss(const void *buf) {
  return flatbuffers::GetRoot<Packet::Party::CTPartyDismiss>(buf);
}

inline const Packet::Party::CTPartyDismiss *GetSizePrefixedCTPartyDismiss(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Packet::Party::CTPartyDismiss>(buf);
}

inline bool VerifyCTPartyDismissBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Packet::Party::CTPartyDismiss>(nullptr);
}

inline bool VerifySizePrefixedCTPartyDismissBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Packet::Party::CTPartyDismiss>(nullptr);
}

inline void FinishCTPartyDismissBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Party::CTPartyDismiss> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCTPartyDismissBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Party::CTPartyDismiss> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Party
}  // namespace Packet

#endif  // FLATBUFFERS_GENERATED_CTPARTYDISMISS_PACKET_PARTY_H_
