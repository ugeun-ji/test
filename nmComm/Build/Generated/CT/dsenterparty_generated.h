// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DSENTERPARTY_PACKET_PARTY_H_
#define FLATBUFFERS_GENERATED_DSENTERPARTY_PACKET_PARTY_H_

#include "flatbuffers/flatbuffers.h"

namespace Packet {
namespace Party {

struct DSEnterParty;

struct DSEnterParty FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_CHARID = 6
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  int32_t charid() const {
    return GetField<int32_t>(VT_CHARID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           VerifyField<int32_t>(verifier, VT_CHARID) &&
           verifier.EndTable();
  }
};

struct DSEnterPartyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(DSEnterParty::VT_ID, id, 0);
  }
  void add_charid(int32_t charid) {
    fbb_.AddElement<int32_t>(DSEnterParty::VT_CHARID, charid, 0);
  }
  explicit DSEnterPartyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DSEnterPartyBuilder &operator=(const DSEnterPartyBuilder &);
  flatbuffers::Offset<DSEnterParty> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DSEnterParty>(end);
    return o;
  }
};

inline flatbuffers::Offset<DSEnterParty> CreateDSEnterParty(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    int32_t charid = 0) {
  DSEnterPartyBuilder builder_(_fbb);
  builder_.add_charid(charid);
  builder_.add_id(id);
  return builder_.Finish();
}

inline const Packet::Party::DSEnterParty *GetDSEnterParty(const void *buf) {
  return flatbuffers::GetRoot<Packet::Party::DSEnterParty>(buf);
}

inline const Packet::Party::DSEnterParty *GetSizePrefixedDSEnterParty(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Packet::Party::DSEnterParty>(buf);
}

inline bool VerifyDSEnterPartyBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Packet::Party::DSEnterParty>(nullptr);
}

inline bool VerifySizePrefixedDSEnterPartyBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Packet::Party::DSEnterParty>(nullptr);
}

inline void FinishDSEnterPartyBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Party::DSEnterParty> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDSEnterPartyBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Party::DSEnterParty> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Party
}  // namespace Packet

#endif  // FLATBUFFERS_GENERATED_DSENTERPARTY_PACKET_PARTY_H_
