// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CTENDQUEST_PACKET_CHARACTER_H_
#define FLATBUFFERS_GENERATED_CTENDQUEST_PACKET_CHARACTER_H_

#include "flatbuffers/flatbuffers.h"

#include "daquest_generated.h"
#include "daquestobjective_generated.h"

namespace Packet {
namespace Character {

struct RewardInfo;

struct CTEndQuest;

enum RewardType {
  RewardType_Weapon = 0,
  RewardType_Armor = 1,
  RewardType_Material = 2,
  RewardType_Gold = 3,
  RewardType_MIN = RewardType_Weapon,
  RewardType_MAX = RewardType_Gold
};

inline const RewardType (&EnumValuesRewardType())[4] {
  static const RewardType values[] = {
    RewardType_Weapon,
    RewardType_Armor,
    RewardType_Material,
    RewardType_Gold
  };
  return values;
}

inline const char * const *EnumNamesRewardType() {
  static const char * const names[] = {
    "Weapon",
    "Armor",
    "Material",
    "Gold",
    nullptr
  };
  return names;
}

inline const char *EnumNameRewardType(RewardType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesRewardType()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) RewardInfo FLATBUFFERS_FINAL_CLASS {
 private:
  int8_t type_;
  int8_t padding0__;  int16_t padding1__;
  int32_t id_;
  int32_t amount_;

 public:
  RewardInfo() {
    memset(this, 0, sizeof(RewardInfo));
  }
  RewardInfo(RewardType _type, int32_t _id, int32_t _amount)
      : type_(flatbuffers::EndianScalar(static_cast<int8_t>(_type))),
        padding0__(0),
        padding1__(0),
        id_(flatbuffers::EndianScalar(_id)),
        amount_(flatbuffers::EndianScalar(_amount)) {
    (void)padding0__;    (void)padding1__;
  }
  RewardType type() const {
    return static_cast<RewardType>(flatbuffers::EndianScalar(type_));
  }
  int32_t id() const {
    return flatbuffers::EndianScalar(id_);
  }
  int32_t amount() const {
    return flatbuffers::EndianScalar(amount_);
  }
};
FLATBUFFERS_STRUCT_END(RewardInfo, 12);

struct CTEndQuest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CHARSID = 4,
    VT_QUEST = 6,
    VT_REWARDSTATIC = 8,
    VT_REWARDBONUS = 10,
    VT_REWARDRANDOM = 12
  };
  int32_t charsid() const {
    return GetField<int32_t>(VT_CHARSID, 0);
  }
  const DAQuest *quest() const {
    return GetPointer<const DAQuest *>(VT_QUEST);
  }
  const flatbuffers::Vector<const RewardInfo *> *rewardstatic() const {
    return GetPointer<const flatbuffers::Vector<const RewardInfo *> *>(VT_REWARDSTATIC);
  }
  const flatbuffers::Vector<const RewardInfo *> *rewardbonus() const {
    return GetPointer<const flatbuffers::Vector<const RewardInfo *> *>(VT_REWARDBONUS);
  }
  const flatbuffers::Vector<const RewardInfo *> *rewardrandom() const {
    return GetPointer<const flatbuffers::Vector<const RewardInfo *> *>(VT_REWARDRANDOM);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_CHARSID) &&
           VerifyOffset(verifier, VT_QUEST) &&
           verifier.VerifyTable(quest()) &&
           VerifyOffset(verifier, VT_REWARDSTATIC) &&
           verifier.VerifyVector(rewardstatic()) &&
           VerifyOffset(verifier, VT_REWARDBONUS) &&
           verifier.VerifyVector(rewardbonus()) &&
           VerifyOffset(verifier, VT_REWARDRANDOM) &&
           verifier.VerifyVector(rewardrandom()) &&
           verifier.EndTable();
  }
};

struct CTEndQuestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_charsid(int32_t charsid) {
    fbb_.AddElement<int32_t>(CTEndQuest::VT_CHARSID, charsid, 0);
  }
  void add_quest(flatbuffers::Offset<DAQuest> quest) {
    fbb_.AddOffset(CTEndQuest::VT_QUEST, quest);
  }
  void add_rewardstatic(flatbuffers::Offset<flatbuffers::Vector<const RewardInfo *>> rewardstatic) {
    fbb_.AddOffset(CTEndQuest::VT_REWARDSTATIC, rewardstatic);
  }
  void add_rewardbonus(flatbuffers::Offset<flatbuffers::Vector<const RewardInfo *>> rewardbonus) {
    fbb_.AddOffset(CTEndQuest::VT_REWARDBONUS, rewardbonus);
  }
  void add_rewardrandom(flatbuffers::Offset<flatbuffers::Vector<const RewardInfo *>> rewardrandom) {
    fbb_.AddOffset(CTEndQuest::VT_REWARDRANDOM, rewardrandom);
  }
  explicit CTEndQuestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CTEndQuestBuilder &operator=(const CTEndQuestBuilder &);
  flatbuffers::Offset<CTEndQuest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CTEndQuest>(end);
    return o;
  }
};

inline flatbuffers::Offset<CTEndQuest> CreateCTEndQuest(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t charsid = 0,
    flatbuffers::Offset<DAQuest> quest = 0,
    flatbuffers::Offset<flatbuffers::Vector<const RewardInfo *>> rewardstatic = 0,
    flatbuffers::Offset<flatbuffers::Vector<const RewardInfo *>> rewardbonus = 0,
    flatbuffers::Offset<flatbuffers::Vector<const RewardInfo *>> rewardrandom = 0) {
  CTEndQuestBuilder builder_(_fbb);
  builder_.add_rewardrandom(rewardrandom);
  builder_.add_rewardbonus(rewardbonus);
  builder_.add_rewardstatic(rewardstatic);
  builder_.add_quest(quest);
  builder_.add_charsid(charsid);
  return builder_.Finish();
}

inline flatbuffers::Offset<CTEndQuest> CreateCTEndQuestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t charsid = 0,
    flatbuffers::Offset<DAQuest> quest = 0,
    const std::vector<RewardInfo> *rewardstatic = nullptr,
    const std::vector<RewardInfo> *rewardbonus = nullptr,
    const std::vector<RewardInfo> *rewardrandom = nullptr) {
  return Packet::Character::CreateCTEndQuest(
      _fbb,
      charsid,
      quest,
      rewardstatic ? _fbb.CreateVectorOfStructs<RewardInfo>(*rewardstatic) : 0,
      rewardbonus ? _fbb.CreateVectorOfStructs<RewardInfo>(*rewardbonus) : 0,
      rewardrandom ? _fbb.CreateVectorOfStructs<RewardInfo>(*rewardrandom) : 0);
}

inline const Packet::Character::CTEndQuest *GetCTEndQuest(const void *buf) {
  return flatbuffers::GetRoot<Packet::Character::CTEndQuest>(buf);
}

inline const Packet::Character::CTEndQuest *GetSizePrefixedCTEndQuest(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Packet::Character::CTEndQuest>(buf);
}

inline bool VerifyCTEndQuestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Packet::Character::CTEndQuest>(nullptr);
}

inline bool VerifySizePrefixedCTEndQuestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Packet::Character::CTEndQuest>(nullptr);
}

inline void FinishCTEndQuestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Character::CTEndQuest> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCTEndQuestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Character::CTEndQuest> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Character
}  // namespace Packet

#endif  // FLATBUFFERS_GENERATED_CTENDQUEST_PACKET_CHARACTER_H_
