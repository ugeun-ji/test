// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DAEQUIPITEM_PACKET_CHARACTER_H_
#define FLATBUFFERS_GENERATED_DAEQUIPITEM_PACKET_CHARACTER_H_

#include "flatbuffers/flatbuffers.h"

namespace Packet {
namespace Character {

struct DAEquipItem;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) DAEquipItem FLATBUFFERS_FINAL_CLASS {
 private:
  int64_t sid_;
  int32_t itemid_;
  int16_t tierlv_;
  int16_t bullet_;
  int64_t upgrade_;
  int8_t type_;
  int8_t padding0__;  int16_t padding1__;  int32_t padding2__;

 public:
  DAEquipItem() {
    memset(this, 0, sizeof(DAEquipItem));
  }
  DAEquipItem(int64_t _sid, int32_t _itemid, int16_t _tierlv, int16_t _bullet, int64_t _upgrade, int8_t _type)
      : sid_(flatbuffers::EndianScalar(_sid)),
        itemid_(flatbuffers::EndianScalar(_itemid)),
        tierlv_(flatbuffers::EndianScalar(_tierlv)),
        bullet_(flatbuffers::EndianScalar(_bullet)),
        upgrade_(flatbuffers::EndianScalar(_upgrade)),
        type_(flatbuffers::EndianScalar(_type)),
        padding0__(0),
        padding1__(0),
        padding2__(0) {
    (void)padding0__;    (void)padding1__;    (void)padding2__;
  }
  int64_t sid() const {
    return flatbuffers::EndianScalar(sid_);
  }
  int32_t itemid() const {
    return flatbuffers::EndianScalar(itemid_);
  }
  int16_t tierlv() const {
    return flatbuffers::EndianScalar(tierlv_);
  }
  int16_t bullet() const {
    return flatbuffers::EndianScalar(bullet_);
  }
  int64_t upgrade() const {
    return flatbuffers::EndianScalar(upgrade_);
  }
  int8_t type() const {
    return flatbuffers::EndianScalar(type_);
  }
};
FLATBUFFERS_STRUCT_END(DAEquipItem, 32);

}  // namespace Character
}  // namespace Packet

#endif  // FLATBUFFERS_GENERATED_DAEQUIPITEM_PACKET_CHARACTER_H_
