// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DSPVPREGISTERMATCH_PACKET_MATCH_PVP_H_
#define FLATBUFFERS_GENERATED_DSPVPREGISTERMATCH_PACKET_MATCH_PVP_H_

#include "flatbuffers/flatbuffers.h"

namespace Packet {
namespace Match {
namespace PvP {

struct DSPvPRegisterMatch;

struct DSPvPRegisterMatch FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CHARSID = 4,
    VT_MATCHKEY = 6
  };
  int32_t charsid() const {
    return GetField<int32_t>(VT_CHARSID, 0);
  }
  int32_t matchkey() const {
    return GetField<int32_t>(VT_MATCHKEY, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_CHARSID) &&
           VerifyField<int32_t>(verifier, VT_MATCHKEY) &&
           verifier.EndTable();
  }
};

struct DSPvPRegisterMatchBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_charsid(int32_t charsid) {
    fbb_.AddElement<int32_t>(DSPvPRegisterMatch::VT_CHARSID, charsid, 0);
  }
  void add_matchkey(int32_t matchkey) {
    fbb_.AddElement<int32_t>(DSPvPRegisterMatch::VT_MATCHKEY, matchkey, 0);
  }
  explicit DSPvPRegisterMatchBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DSPvPRegisterMatchBuilder &operator=(const DSPvPRegisterMatchBuilder &);
  flatbuffers::Offset<DSPvPRegisterMatch> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DSPvPRegisterMatch>(end);
    return o;
  }
};

inline flatbuffers::Offset<DSPvPRegisterMatch> CreateDSPvPRegisterMatch(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t charsid = 0,
    int32_t matchkey = 0) {
  DSPvPRegisterMatchBuilder builder_(_fbb);
  builder_.add_matchkey(matchkey);
  builder_.add_charsid(charsid);
  return builder_.Finish();
}

inline const Packet::Match::PvP::DSPvPRegisterMatch *GetDSPvPRegisterMatch(const void *buf) {
  return flatbuffers::GetRoot<Packet::Match::PvP::DSPvPRegisterMatch>(buf);
}

inline const Packet::Match::PvP::DSPvPRegisterMatch *GetSizePrefixedDSPvPRegisterMatch(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Packet::Match::PvP::DSPvPRegisterMatch>(buf);
}

inline bool VerifyDSPvPRegisterMatchBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Packet::Match::PvP::DSPvPRegisterMatch>(nullptr);
}

inline bool VerifySizePrefixedDSPvPRegisterMatchBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Packet::Match::PvP::DSPvPRegisterMatch>(nullptr);
}

inline void FinishDSPvPRegisterMatchBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Match::PvP::DSPvPRegisterMatch> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDSPvPRegisterMatchBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Match::PvP::DSPvPRegisterMatch> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace PvP
}  // namespace Match
}  // namespace Packet

#endif  // FLATBUFFERS_GENERATED_DSPVPREGISTERMATCH_PACKET_MATCH_PVP_H_
