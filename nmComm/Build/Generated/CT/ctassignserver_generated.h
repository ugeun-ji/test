// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CTASSIGNSERVER_PACKET_CLIENT_H_
#define FLATBUFFERS_GENERATED_CTASSIGNSERVER_PACKET_CLIENT_H_

#include "flatbuffers/flatbuffers.h"

namespace Packet {
namespace Client {

struct CTAssignServer;

struct CTAssignServer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DSSERVER = 4,
    VT_DSCHANNEL = 6,
    VT_IP = 8,
    VT_PORT = 10,
    VT_HASH = 12,
    VT_KEY = 14
  };
  int32_t DSServer() const {
    return GetField<int32_t>(VT_DSSERVER, 0);
  }
  int32_t DSChannel() const {
    return GetField<int32_t>(VT_DSCHANNEL, 0);
  }
  const flatbuffers::String *ip() const {
    return GetPointer<const flatbuffers::String *>(VT_IP);
  }
  uint32_t port() const {
    return GetField<uint32_t>(VT_PORT, 0);
  }
  uint64_t hash() const {
    return GetField<uint64_t>(VT_HASH, 0);
  }
  const flatbuffers::String *key() const {
    return GetPointer<const flatbuffers::String *>(VT_KEY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_DSSERVER) &&
           VerifyField<int32_t>(verifier, VT_DSCHANNEL) &&
           VerifyOffset(verifier, VT_IP) &&
           verifier.VerifyString(ip()) &&
           VerifyField<uint32_t>(verifier, VT_PORT) &&
           VerifyField<uint64_t>(verifier, VT_HASH) &&
           VerifyOffset(verifier, VT_KEY) &&
           verifier.VerifyString(key()) &&
           verifier.EndTable();
  }
};

struct CTAssignServerBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_DSServer(int32_t DSServer) {
    fbb_.AddElement<int32_t>(CTAssignServer::VT_DSSERVER, DSServer, 0);
  }
  void add_DSChannel(int32_t DSChannel) {
    fbb_.AddElement<int32_t>(CTAssignServer::VT_DSCHANNEL, DSChannel, 0);
  }
  void add_ip(flatbuffers::Offset<flatbuffers::String> ip) {
    fbb_.AddOffset(CTAssignServer::VT_IP, ip);
  }
  void add_port(uint32_t port) {
    fbb_.AddElement<uint32_t>(CTAssignServer::VT_PORT, port, 0);
  }
  void add_hash(uint64_t hash) {
    fbb_.AddElement<uint64_t>(CTAssignServer::VT_HASH, hash, 0);
  }
  void add_key(flatbuffers::Offset<flatbuffers::String> key) {
    fbb_.AddOffset(CTAssignServer::VT_KEY, key);
  }
  explicit CTAssignServerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CTAssignServerBuilder &operator=(const CTAssignServerBuilder &);
  flatbuffers::Offset<CTAssignServer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CTAssignServer>(end);
    return o;
  }
};

inline flatbuffers::Offset<CTAssignServer> CreateCTAssignServer(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t DSServer = 0,
    int32_t DSChannel = 0,
    flatbuffers::Offset<flatbuffers::String> ip = 0,
    uint32_t port = 0,
    uint64_t hash = 0,
    flatbuffers::Offset<flatbuffers::String> key = 0) {
  CTAssignServerBuilder builder_(_fbb);
  builder_.add_hash(hash);
  builder_.add_key(key);
  builder_.add_port(port);
  builder_.add_ip(ip);
  builder_.add_DSChannel(DSChannel);
  builder_.add_DSServer(DSServer);
  return builder_.Finish();
}

inline flatbuffers::Offset<CTAssignServer> CreateCTAssignServerDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t DSServer = 0,
    int32_t DSChannel = 0,
    const char *ip = nullptr,
    uint32_t port = 0,
    uint64_t hash = 0,
    const char *key = nullptr) {
  return Packet::Client::CreateCTAssignServer(
      _fbb,
      DSServer,
      DSChannel,
      ip ? _fbb.CreateString(ip) : 0,
      port,
      hash,
      key ? _fbb.CreateString(key) : 0);
}

inline const Packet::Client::CTAssignServer *GetCTAssignServer(const void *buf) {
  return flatbuffers::GetRoot<Packet::Client::CTAssignServer>(buf);
}

inline const Packet::Client::CTAssignServer *GetSizePrefixedCTAssignServer(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Packet::Client::CTAssignServer>(buf);
}

inline bool VerifyCTAssignServerBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Packet::Client::CTAssignServer>(nullptr);
}

inline bool VerifySizePrefixedCTAssignServerBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Packet::Client::CTAssignServer>(nullptr);
}

inline void FinishCTAssignServerBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Client::CTAssignServer> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCTAssignServerBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Packet::Client::CTAssignServer> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Client
}  // namespace Packet

#endif  // FLATBUFFERS_GENERATED_CTASSIGNSERVER_PACKET_CLIENT_H_
